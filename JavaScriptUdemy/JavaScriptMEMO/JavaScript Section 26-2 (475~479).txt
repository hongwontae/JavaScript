1. Reflect API
Reflect는 JS 개체로 클래스의 정적 메서드들을 그룹화한다.
객체를 써서 작업할 떄 도움이 되는 기능을 묶는 것이다.
=> 객체로 작업할 떄 도움을 주는 API이다.

Reflect.setPrototypeOf() => 객체의 프로토타입을 지정하는 메서드
Reflect.difineProperty() => 객체에 프로퍼티를 추가해주는 메서드
Reflect.deleteProperty() => 객체의 프로퍼티를 삭제해주는 메서드

Object API도 위의 메서드가 존재하지만 Object API 메서드는 실패했을 경우 정의되지 않았다고 반환하거나 무응답인데 반해 Reflect API는 에러를 반환하거나 주어진 메서드에 true, false로 반환하여 작동 여부를 알려준다.

또한 Reflect API는 객체로 작업할 떄 필요한 모든 기능을 묶어났다.
deleteProperty는 Object API에 존재하지 않는다. => 기존에는 delete 키워드를 사용했다.


2. Proxy API와 첫 번쨰 함정
프록시 API는 객체를 수정하거나 코드에 추가 가능을 부여할 수 있다.

1. 특정 개체의 연산을 위해 트랩을 만든다.
2. 특정 연산에 개입하고 자신만의 코드를 실행할 수 있다.
3. 코드를 어떻게 사용할지, 어떤 영향을 줄지 제어할 수 있다.

Proxy는 인스턴스 생성을 통해 사용한다. cosnt pCourse = new Proxy();
인자는 두 개를 받는다.

첫 번쨰 인자는 객체이고 해당 객체를 래핑하는 것이다.
두 번쨰 인자는 객체이다. 래핑된 객체에 특정 동작 또는 연산을 수행하게 한다.
=> 특정 트랩을 정의한다. 트랩은 함수이다. 객체 내에 함수를 정의하는 것이다.
=> 프록시의 프로퍼티에 접근할 때마다 두 번쨰 인자 객체(함수)가 작동한다. => 핸들러라고도 부른다.

ex) 
const course = {title = 'JavaScript The Guide'}
const pCourse = new Proxy(course,courseHandler)
const courseHadler = {
  get(obj,propertyName){
   console.log(propertyName);
   return obj[propertyName]
 }
}
console.log(pCourse.title);
=> 프록시 객체의 프로퍼티에 접근하면 핸들러가 작동하여 get 함수가 작동된다.
=> get트랩은 로직에 의하여 KEY와 VALUE가 반환된다.
=> get트랩은 함수내의 로직을 바꿔서 다르게 반환해도 된다.

set 트랩
값을 설정하려고 할 떄 발동되는 트랩이다.
set(obj, propertyName, newValue){
 return obj[propertyName] = newValue
}
=> obj는 해당 객체, propertyName은 설정하려는 propertyName, newValue는 설정하려는 value
=> pCourse.rating = 0.5/ obj=pCourse, rating=propertyName, newValue=value;

=> 프록시를 이용해 해당 객체의 제어를 할 수 있다.




















