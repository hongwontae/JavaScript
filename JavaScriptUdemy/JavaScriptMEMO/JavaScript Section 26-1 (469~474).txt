1. Symbol 이해하기
Symbol
=> Primitive value이다. 객체 프로퍼티 식별자인 객체의 키로 사용할 수 있다.
=> 빌트인 심볼과 고유한 심볼이 존재한다.
=> 모든 심볼은 독립적이고 유일하다.

const uid = Symbol() => 새로운 심볼을 만드는 표현식
인자에 값을 넣으면 이름이 주어지는데 이는 개발자 식별 기준일 뿐이다.

어떤 객체를 정의하고 라이브러리를 만들었다. => 해당 라이브러리를 사용하는 개발자가 객체를 사용한다.
=> 이 때 어떤 키-값은 재정의되지 않아야 하는 특정한 프로퍼티이다.
=> 이럴 떄 키에 Symbol를 부여하면 그 프로퍼티는 유일성과 독립성을 가지게 된다.

특징
1. Symbol('uid') === Symbol('uid') => false이다.
=> 인자에 전해주는 값은 단지 개발자 디버깅, 식별용일 뿐이다. 해당 심볼 변수가 아니다.
2. 해당 키값에 접근하는 방법은 내부에서만 가능하다. 외부에서는 불가능하다.
3. 객체의 키 값을 설정할 떄 많이 사용한다. => 이 떄 키에 접근하지 못하기 떄문에 유일성과 독립성이 보장되는 것이다.


* 내부 코드에서 접근하는 방법 => 객체[심볼 변수] = value;


2. Symbol High
JS에서는 특정 환경에서 사용하는 특정 빌트인 심볼이 있다.
for-of 반복문은 돌릴 객체에서 Symbol.iterator를 찾는다.
=> JavaScript는 ES6 이후에 객체의 프로퍼티의 유일성을 갖기 위해 Symbol를 사용했다.
=> 이를 빌트인 심볼이라고 부른다.

ex) 객체에 toString()은 Object Object가 반환된다. 이 떄 반환되는 값을 제외하는 심볼 프로퍼티가 존재한다. 
	[Symbol.toStringTag] : 'User'/ user.toString() => 'Object User'
Object Object 값을 오버라이딩을 원하지 않기 떄문이다.


3. Iterator
Iterator는 next 메서드를 가진 객체이다.
=> const company = {
    curEmployee : 0,
    employees : ['Max','Manu','Anna'],
    next(){
        if(this.curEmployee >= this.employees.length){
            return {value : this.curEmployee, done : true}
        }
        const returnValue = {
            value : this.employees[this.curEmployee],
            done : false
        }
        this.curEmployee++;
        return returnValue;
    }
};

company.next()
company.next()
company.next()

{value: 'Max', done: false}
{value: 'Manu', done: false}
{value: 'Anna', done: false}

or
let employee = companmy.next();
while(!employee.done){
  console.log(employee.value);
  employee = company.next();
}


=> 처음으로 company.next()를 호출하면 curEmployee는 0이다. if check는 curE이 배열의 길이와 같거나 커야 걸린다. => const retrunValue에 this.employees[0]이 할당되고 done : false가 할당된다. 이후 curE+1 이후 returnValue 객체가 반환된다. 이 과정을 지속하면 .next()가 3번 호출되면 if check에 걸리고 숫자만 반환된다.

* 여기에 조금의 로직을 더 한다면 for-of이다.


4. Iterator And for Loop
for-of를 위해서 [Symbol.iterator]가 객체 안에 존재해야 한다.
next 로직의 메서드는 반복자이다. Symbol.iterator는 반복자가 값이어야 한다.
제너레이터는 JS에서 Itreator 객체를 사용해서 빌트인 next 메서드를 가진 객체를 생성한다.
=> JS 함수이며 자동으로 반복자를 생성해준다.
=> 제너레이터 함수식 [Symbol.iterator] : function* 함수이름(익명함수도 가능) (){}
=> 값을 반환할 식은 yield 키워드를 사용한다. return과 비슷하다.
=> generator를 사용하면 next 객체를 생성하는 것이다.

for-of를 사용하면 해당 객체의 [Symbol.iterator] 키를 찾고 값을 실행한다.
단 SI는 next() 메서드만 실행하기 떄문에 next()를 수동으로 만들거나 function* 제너레이터를 사용해야 한다.
제너레이터를 사용하면 return 대신 yield를 사용한다. 
** yield은 return과 비슷하지만 return은 이 키워드를 만나자마자 끝내지만 yield는 이 키워드를 만났을 떄 끝내고 다음 함수가 호출되었을 떄 밑의 코드를 실행하고 yield를 만날 떄 끝난다.=> 이게 반복된다.

function*는 항상 next()를 생성한다. next()의 값은 {value : done/false}이다.


5. 생성자 요약 & 빌트인 반복 예시
let arr = [1,2,3] => prototype에 Symbol.iterator가 존재한다.
arr.length 프로퍼티는 Symbol.iterator의 사용을 받는다.
=> arr는 0,1,2 index이고 이를 반복할 떄 2에서 끝나도록 Symbol.iterator가 제어한다.
=> 배열에 length 프로퍼티가 있는 이유








































