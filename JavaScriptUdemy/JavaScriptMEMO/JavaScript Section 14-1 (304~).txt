1. JavaScript내의 이벤트 소개
웹페이지와 사용자의 상호작용 => JS Event
사용자의 행위로 인해 event가 트리거되거 함수가 실행된다. 이 때 함수를 이벤트 핸들러라고 말한다.


2. 이벤트를 리스닝하는 다양한 방법
각 DOM 요소들은 addEventListener에 접근할 수 있다. => 각 dom들은 event를 트리거할 프로퍼티나 메서드를 가지고 있다. (addEventListner, onclick, ondrag...etc)

이벤트를 추가하는 방법
1. HTML 파일에서 속성으로 추가하는 방법
=> 프로젝트를 관리하기 어려워진다. HTML코드내에 JS코드가 있기 때문에 무결성을 해친다.

2. JS 파일에서 직접 트리거들은 걸어서 사용한다.
=> 이 방식은 하나의 이벤트에 하나의 함수만 사용될 수 있다.
=>  함수를 두개 사용하면 오버라이딩되어 맨 마지막에 추가된 함수만 이벤트 핸들러가 된다.

3. JS 파일에서 addEventListener를 사용하여 추가한다.
=> 동일 요소에 대해 이벤트 핸들러를 여러개 둘 수 있다.
=> removeEventListener를 통해 이벤트 리스너를 지울 수 있다.

=> addEventListener를 사용하는 것이 유용하다.
addEventListener() 
=> 인자로 두 개를 받는다. 하나는 이벤트 요소, 하나는 이벤트가 트리거 됐을 때 사용될 함수
=> 이벤트 요소는 문자열로 넣어야 한다. 다만 DOM의 붙어 있는 이벤트 요소는 on이 존재하지만 addEventListener의 이벤트 요소는 on이 붙어있지 않는다.


3. 이벤트 리스너 제거하기
dom.removeEventListener()
=> 첫 번쨰 인자로 제거할 이벤트 요소, 두 번쨰 인자로 제거될 함수를 넣는다.

초보자가 헷갈릴 removeListener의 함정
remove에 두 번쨰 인자는 함수 표현식의 변수를 넣어줘야 한다. 같은 이벤트 요소와 같은 함수일 떄 remove가 작동하여 해당 이벤트를 삭제한다.


4. 이벤트 객체
Event Object는 브라우저에서 자동으로 생성되고 이벤트 핸들러에 전달이 된다. 이벤트의 타겟이나 추가 메타 데이터, 이후 이벤트 동작을 제어하는 메서드를 제공한다.

event.target 
=> 어떤 요소가 이벤트의 원인이 되는지를 설명하는 프로퍼티이다. => 지금은 DOM BUTTON을 의미한다.
=> 또한 직접 요소에 대한 직접적인 엑세스도 가능하다. button을 get하는 것 뿐만 아니라 set도 가능하다는 의미이다.


5. 지원되는 이벤트 유형

mouseenter 
=> 마우스 또는 커서가 버튼을 누를 떄 트리거된다.

mouseenter.relatedTarget 
=> 마우스가 이벤트 트리거에 들어가기 전에 커서가 어떤 요소 위에 있었는지를 반환한다. (마우스가 어떤 요소를 거쳐서 들어왔냐?) 마우스를 너무 빠르게 움직이면 relatedTarget은 HTML을 가르킨다.
Browser가 마우스 커서의 위치를 지속적으로 확인하는 것이 아니라 주기적으로 확인하기 때문이다.


scroll
=> 스크롤링을 할 떄마다 트리거된다.

...etc 


6. preventDefault();









































