1. 브라우저 지원이란 무엇인가?
Browser API => 브라우저가 노출하는 API를 의미한다. (BOM(navigator, locate), DOM....)
JS Syntax => JS 언어에 빌트인 된 모든 키워드와 기능을 의미한다.

브라우저 API는 각각의 브라우저 마다 다른 기능을 JS에게 준다.
JS는 브라우저 기능을 이용하여 웹페이지를 구성할 수 있다. 다만 모든 브라우저에서 적용되는 것은 아니다.

일반적으로 모든 브라우저에서 JS가 돌아가게 하려면 JS Syntax를 이용한 코드를 작성하는 것이 좋다.


2. JS 기능에 대한 브라우저 지원 여부
MDN => JS Syntax와 브라우저 API에 설명하고 브라우저 지원을 알려준다.
casiuse.com => 위와 마찬가지이다.
ES6/JS Compat Table => JS Syntax의 브라우저 지원 여부를 알려준다.


3. 필요한 지원 판단하기
어플리케이션의 사용자를 판단해서 브라우저 API나 js 최신문법의 사용여부를 판단하면 된다.


4. 솔루션 : 기능 탐지 + 폴백 코드
최근에 개발된 navigator.clipboard를 사용하는 어플리케이션을 만든다고 가정해보자
두 가지를 생각해야 한다. 브라우저가 clipboard를 지원한다면 clipboard를 사용하는 코드를 작성하고 브라우저가 지원하지 않는다면 fallback code를 작성하거나 오류 메시지를 보여준다.

clipboard API는 웹 사용자의 복사를 도와주는 API이다.
navigator.clipboard.writeText() 
=> 인자에 text를 사용자의 클립보드에 추가한다.
=> 프로미스 기반 API이다. then과 catch, async/await가 사용가능하다.
=> 다만 Chrome 브라우저에서만 Clipboard API를 지원한다.

어플리케이션 충돌을 막기 위해서 try-catch를 사용해도 되지만 코드의 가독성이 떨어진다.
=> 특징 감지를 이용한다.

특징 감지
navigator.clipboard를 지원하지 않는 브라우저에서는 저 구문이 바로 undefined가 반환된다.
=> if(navigator.clipboard)의 falsy 값을 이용하여 코드를 작성하면 된다.
=> 이렇게 작성하면 특정 API를 지원하지 않는 브라우저의 콘솔에는 오류가 없게 된다. 다만 사용만 불가할 뿐이다.

폴백코드 => 지원되지 않는 API를 사용하거나 오류가 발생했을 떄 실행하는 코드
EX) alert, 대체 경로 etc...


5. 솔루션 : 폴리필
폴리필은 브라우저에서 누락된 기능을 추가해 주는 타사 패키지를 말한다.
=> 기능을 사용하는 법을 브라우저에 가르쳐준다. => 모든 기능이 가능한 것은 아니다.
Fetch API나 Promise를 폴리필을 이용하여 구형 브라우저에서 기능하게 할 수 있다.
















































