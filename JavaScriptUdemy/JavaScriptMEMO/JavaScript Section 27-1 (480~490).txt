1. JavaScript-호스트 언어
JavaScript는 다른 환경에서 구현될 수 있다. 
=> 따라서 코드를 분석하고 실행하는 JS 엔진이 필요하다.

일반적인 환경 중 하나는 브라우저이다. =>  V8엔진
V8 엔진과 Browser API를 사용하는 것이 클라이언트 측 JavaScript이다.

Node.js는 Chrome이 제공하는 v8 엔진을 추출한 것으로 추가 API로 강화한 브라우저의 엔진이다.
브라우저 API가 아닌 다른 API에 엑세스하고 브라우저 외부에서 실행된다.
브라우저 외부에서 JS가 작동하면 DOM이나 브라우저 저장소와 같은 브라우저의 특정 부분은 중요하지 않다.


2. 설치 & 기초
console.log, console.dir, console.err.... => Node.js에서도 제공하는 기능이다.
let,const,백틱 => 제공

node.js로 파일 실행하기
터미널을 통해 해당 파일 경로로 이동 => node 파일 이름 => Node.js 기반으로 JS가 파일이 실행된다.
document.querySelector('button')을 사용하면 JS 기능이라 오류가 발생하지 않지만 node 파일이름을 실행하면 브라우저 API가 없기 때문에 오류가 발생한다.

Node.js => 흔히 말하는 서버이다.

=> webpack은 브라우저에서 읽고 사용되는 것이 아니라 node.js 기반으로 실행되고 완성된 결과를 브라우저에게 주는 것이다.


3. 모듈 & 파일 엑세스 이해하기
Node.js에서 필요한 기능들은 import하여 사용한다.
Node.js는 바닐라 js와 달리 import 대신 require를 사용해서 모듈이나 파일을 요청한다.

모듈 => 어플리케이션을 구성하는 개별적 요소를 말한다. 하나의 JS 파일을 의미한다.

ex) fs 사용하기
fs => 파일 시스템 모듈
const fs = require('fs') => fs 변수에 fs 모듈을 할당한다.

fs.writeFile('파일이름','텍스트 내용', (err)=>{에러처리})
fs.readFile('파일이름',(err,data)=>{에러나 데이터 읽는처리})


4. 들어오는 HTTP 요청으로 작업하기
일부 모듈은 사용하려면 require 키워드를 통해 가져와야 하지만 대부분의 모듈은 전역적으로 사용이 가능하다.

HTTPRequest module => http 웹 서버와 관련된 모듈이다.

http.createServer() => 서버를 설정하는 메서드이다.
http.createServer().listen(); => 서버를 시작하는 메서드이다. 이를 통해서 들어오는 요청을 리스닝한다.

const server = http.createServer((request, response) => {
   response.write('Hello there');
   response.end();
});

server.listen();

createServer의 인자는 콜백함수이고 두 개의 인자를 받는다. request는 들어오는 요청에 대한 설정이고 response는 나가는 응답에 대한 설정이다. response.write()는 응답메시지, response.end()는 응답 설정이 끝나면 node.js에게 알리는 메서드이다. 
이후 server.listen()를 통해 서버가 시작되고 리스닝이 시작된다. 인자로는 포트를 받는다.

** node app.js를 통해 node.js를 실행시키면 스크립트는 종료되지 않는다. => 서버 실행이기 떄문이다.


5. 응답 보내기 (HTML 데이터)
서버와의 통신 이후 node.js 스크립트를 변경하면 서버를 재시작해야 변동사항이 적용된다.
response.wirte()의 인자는 HTML 태그를 포함한 채 내보낼 수 있다.
이 때 브라우저의 response Header는 데이터 종류에 관한 내용이 없다.
=> 서버의 전송을 받은 브라우저가 응답을 보고 예측한 것이다.
=> response 객체에서 데이터 형식을 설정해야 한다.

response.setHeader('Content-Type','text/html')
response.setHeader('Content-Type','text/plain')
=> text/plain은 텍스트만 보낸다는 뜻이다. html 태그가 들어가도 브라우저는 추측하지 않는다.
=> text.html은 보내는 데이터가 html 컨텐츠라고 알린다. 


6. 들어오는 데이터 구문 분석하기
<form>과 <input>의 동작에 대해서 알아야 한다. => method, action, type, name
response는 나가는 데이터, request는 받는 데이터이다.


7. Express.js
=> node.js에서 웹 애플리케이션과 웹 서버를 쉽게 구축하는 프레임워크이다.
1. npm init => 의존성 설치 준비, package.json를 설치한다.
2. npm install express --save => express.js를 설치한다.
=> Java의 spring과 비슷한 역할을 한다.


8. express.js 기초
const express = requires('express');
const app = express();
app.listen(3000)
=> 서버를 만들고 노출시키는 기본적인 구문

express.js 미들웨어 프레임워크이다.
express.js는 여러 다른 함수들을 통해 들어오는 요청을 전달하는 역할을 한다. 미들웨어는 단순히 함수로 요청을 받고 무엇가를 실행한다.
미들웨어는 코드의 순서가 중요하다. 위의 미들웨어가 실행되고 밑의 미들웨어가 실행되는 순서이다.

app.use(req,res,next)
=> 인자로 함수를 받는다. 미들웨어를 등록한다는 뜻이다.
=> req는 받는 데이터, res는 보내는 데이터, next는 express.js에 작업이 완료되지 않았다고 말하는 것이다.
   next() 메서드가 실행된 것은 미들웨어의 끝이라는 것을 알려주는 것이다.

Browser의 Content-type을 보면 charset=utf-8이 있다. => express.js가 자동으로 추가해준 것이다.


9. 데이터 추출하기
데이터의 분석을 도와주는 라이브러리  => body-parser 패키지
=> npm install body-parser --save
=> 들어오는 요청과 요청 본문을 분석하고 추출한다. 그리고 분석된 본문을 req 객체의 본문 필드에 보낸다.
=> req.body.input 속성명으로 접근하면 값을 가져온다.


10. 템플릿 & EJS를 사용해 서버 측 HTML 렌더링하기
npm install --save ejs => HTML template를 node.js와 연동하는 패키지
app.set('view engine', 'ejs'); => 뷰와 템플릿을 분석하는 엔진이 ejs라고 알려준다.
app.set('views','views') => 폴더이름과 경로

ejs => 타임리프와 비슷한것 같다.
<%= user%> => node.js 서버가 돌아갈 때 패키지로 인해 ejs가 렌더링되고 해당 구문이 ejs 패키지로 인해 해석되어 동적인 결과가 반환되는 것이다.

동적인 결과를 반환하려면
res.render('렌더링할 파일이름',{
  <%=%> : value
})



















































