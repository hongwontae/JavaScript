1. Basic Function (basics-06-basic-function)
Define Function => 함수를 메모리 상에 저장해둔다. 아직 실행되지는 않는다.
Call funcktion => 함수를 호출한다. 이 행동이 함수를 실행시키는 것이다.

함수는 필요에 따라 매개변수를 받는다./ 매개변수는 함수을 동적으로 작동시키는 것이라 보면 된다.
함수에 매개변수를 주면 변수의 이름이 아니라 변수의 값이 전달되는 것이다.

함수의 선언은 function 함수이름 () {}
함수의 호출은 함수이름();

-- 자바스크립트의 문자열은 한 줄에서만 인식된다.


2. Return (basics-07-function-with-return)
함수가 호출되었을 때의 결과값을 건너주는 키워드

ex) function add (num1, num2) {
 const result = num1+num2
 return result
}

currentResult = add(1,3);

return이 없다면 값이 전달되지 않는다.

Return 밑에 있는 코드는 실행되지 않는다. Return문부터는 코드가 시작되지 않는다.


3. Code 순서 (basics-07-function-with-return app1.js)
변수나 상수를 사용하기 전에 먼저 선언을 해야한다. Js는 위에서부터 아래로 내려가면서 코드를 확인하는데 선언된 변수가 없는데 변수에 값을 할당하려고 하면 오류가 발생한다.

JS의 작동방식은 
위에서부터 아래로 코드를 읽는다. => 읽은 함수를 등록한다. => 페이지 내에서 함수가 호출되면 그떄 실행된다.
그렇기 때문에 함수의 위치는 자유롭다.


4. 전역, 로컬 범위 (basics-07-function-with-return app1.js)
변수는 선언되는 동시에 자신만의 Scop를 갖는다./ 지역변수는 함수 내에서 전역변수보다 더 높은 우선순위를 갖는다.

함수는 외부에 정의된 변수 및 상수에 엑세스할 수 있어서 전역적으로 정의된 변수나 상수를 읽을 수 있다.

로컬(Block) Scope => 함수 내부에 상수나 변수를 정의를 했을 떄의 범위 
Local Scope는 정의된 위치에서 벗어날 수 없다. {} 중괄호 내에서 벗어날 수 없다는 이야기이다.

그러나 함수는 주변의 모든 범위에서 값을 가져와서 사용할 수 있다. 모든 변수에 엑세스가 가능하다.


5. Function 간접적으로 실행하기
함수안에 함수가 존재할 수 있다. 즉, a라는 함수에 b함수가 존재할 떄 a함수를 호출하면 b함수도 호출되는 개념이다.


6. add() VS add (basics-08-user-input-function)
add(); => 함수를 바로 호출해라
add => 조건이 충족되면 실행해라

ex) addBtn.addEventListener('click', add); => click이 되었을 떄만 add함수를 실행해라


7. 자료형 변환하기 (basics-09-parseint)
HTML 코드 상 Input 태그가 숫자 유형(number)로 되어 있다 해도 JS로 가져올 때는 항상 문자열이 된다.
비단 숫자 유형 뿐만 아니라 다른 유형이라도 모조리 문자열로 가져온다.

ParseInt() => 문자열을 소수점 이하 숫자가 없는 수로 구문 분석하는 함수이며 ParseFloat은 소수점 아래 자리가 있는 수로 분석한다. 즉, 문자열을 숫자로 바꿔준다.

문자열 앞에 있는 +는 문자열을 숫자로 전환한다.
ex) currentResult = currentResult+ +parseInt(userInput.value)

숫자를 문자열로 변환 => toString()

연산자 High
3+'3' => '33' (문자열)/ +는 텍스트를 결합할 수 있는 특성이 있어서 이 방식으로 작동한다.
3-'3' => 0 (숫자)
3*'3' => 9 (숫자)


-- 템플릿 리터럴의 +기호는 접합시켜주는 것이 아니라 문자 그대로 +가 출력된다. (+ 기호가 의미없기 때문이다.)
-- 생각해보면 '', ""도 마찬가지이다. (''+'' => 이거니까.. 조금 헷갈렸다.)


8. 리팩토링(basics-10-function-refactoring)
중복된 코드를 함수나 변수로 빼는 작업/ 코드를 명확하게 하는 작업


9. 주석
// => 한 줄 주석
/* 범위  */ => 범위 내 주석


10. 연산자 (basics-11-subtract-multiply-divide)
+= => ex) currentValue = CurrentValue+5 = currentValue+=5
-= => ex) currentValue = currentValue-5 = currentValue-=5
*과 나눗셈도 마찬가지이다.

++/-- => 증가연산자/ 증감연산자
증가/감소 연산자가 앞에 붙으면 return전에 값은 기존의 값이다.
증가/감소 연산자가 뒤에 붙으면 return값과 return전의 값은 같다.


11. 데이터 타입2
Boolean => true/false
Object => {name : 'hwt', age : 12} => 객체타입
Array => [1,3,5], [1,'3',true] => 배열의 데이터 타입은 객체이다.


12. 배열 (basics-14-basic-array-with-push)
배열은 값의 모음이다.

ex) let logic = [];
  logic = ['Alex'] => 기존의 배열을 없애고 재할당하는 방법
  logic.push('Alex') => 기존의 배열을 유지하고 배열에 값을 추가하는 방법
  logic[1] => 배열의 인덱스 번호를 가져와서 값을 읽는 방법

배열의 데이터는 일관적이지 않아도 된다. (let lo = [1,'alex',function(){}])


13. 객채 (basics-16-basic-object)
키와 값으로 이루어진 데이터 형태이다.
ex) const user = {
  name : 'HWT',
  age : 26
}

JS의 객체의 값은 일반적인 자료형 뿐만 아니라 배열이나 객체, 함수도 들어갈 수 있다.


14. 함수를 통해 객체에 값 전달하기 (basics-16-basic-object)
function test (operation, currentResult){
  operation : operation,
  currentResult : currentResult
}

test('Add', currentResult);

=> test()함수가 호출되어서 'Add'와 currentResult 함수의 매개변수로 전달되었다. 이 매개변수들은 함수의 매개변수 호출 순서에 따라 'Add' => Operation/ currentValue => currentValue가 되었다. (이 떄 전달되는 것은 값이 전달되는 것이다.) 그리고 자동적으로 매개변수들은 자신과 이름이 일치하는 객체의 값에 전달된다.


15. undifined, null, NaN
undifined는 데이터 타입이자 값이다.
undifined는 초기화 되지 않은 변수의 기본값이다.

null은 객체의 유형이다.
null은 값이 존재하지 않다는 것을 명시한 값이다.

Nan은 숫자유형이다. 
텍스트*숫자 => nan/ 일종의 숫자오류라고 생각하면 된다.


16. TypeOf
값의 유형을 알 수 있는 키워드이다.

ex) TypeOf "hi there" => "String"
    TypeOf 1 => "number"
    TypeOf null => "Object"


17. defer And async (basics-17-finished)
웹 페이지 -> 검사 
-> Performance : 페이지를 렌더링 할 떄 브라우저에서 실행하는 작업을 자세히 알 수 있다. 스크립트 분석 가능


브라우저는 html을 읽다가 script를 만나면 DOM 생성을 멈추고 script를 읽는다. => sciprt를 전부 읽고 실행한 뒤에 DOM를 생성한다. 이는 sciprt가 DOM를 찾지 못해서 의도치 않은 효과를 일으킬 수 있고 DOM 생성이 느리기 떄문에 사용자에게 좋지 않은 결과를 주게 된다.

<script src="asd" defer>
defer 속성을 사용하면 백그라운드에서 script을 다운로드한다. html은 DOM 생성을 멈추지 않는다.
DOM이 준비가 되면 script가 실행된다.

<sciprt src="aaa" async>
async을 주게 되면 html 파싱을 멈추지 않고 script를 다운로드한다. html은 script를 기다리지 않고 실행한다. 다만 script가 파싱이 끝나고 실행되면 그 떄 html 파싱을 멈춘다.














































