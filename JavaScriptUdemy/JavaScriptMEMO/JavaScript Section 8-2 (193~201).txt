1. includes()
=> 배열안에 값이 있는지 없는지 Boolean으로 반환해주는 메서드이다.


2. forEach()
forEach 메서드는 다음 매개변수(parameter)와 함께 배열의 각 요소에 적용하게 될 콜백 함수(callback function)를 전달한다.

Current Value (명명된 매개변수) - 처리할 현재 요소
Index (선택적 매개변수) - 처리할 현재 요소의 인덱스
Array (선택적 매개변수) - forEach 메서드를 호출한 배열

=> 매개변수로 함수를 받는다. (콜백함수)
=> 자체 반환값은 없다. 항상 undefined이다.
=> 복사된 값은 새로운 배열이다.


3. map()
forEach와 동일하다. 그러나 콜백 함수의 반환값들로 구성된 새로운 배열을 반환한다. <= {return이 있는 이유}
forEach는 for을 대체하기 위한 함수이고 map은 새로운 반환값을 얻기 위한 함수이다.


4. sort()/ reverse()
arr.sort([compareFunction])

매개변수가 생략되면, 배열의 element들은 문자열로 취급되어, 유니코드 값 순서대로 정렬됩니다.
이 함수는 두 개의 배열 element를 파라미터로 입력 받습니다.

이 함수가 a, b 두개의 element를 파라미터로 입력받을 경우,
이 함수가 리턴하는 값이 0보다 작을 경우,  a가 b보다 앞에 오도록 정렬하고,
이 함수가 리턴하는 값이 0보다 클 경우, b가 a보다 앞에 오도록 정렬합니다.
만약 0을 리턴하면, a와 b의 순서를 변경하지 않습니다.

=> 이 떄 새로운 값을 반환하는 것이 아니다. 원본타입을 정렬시키고 리턴 값은 기존의 배열이다.

reverse() => 배열을 반전시킨다. => 원본타입


5. filter()
배열을 순회하는데 조건을 주어서 원하는 값만 반환하는 메서드이다.
새로운 배열을 만든다. 리턴값은 새로운 배열이다.
매개변수로 콜백함수를 받는다. => 여기에 조건을 넣는 것이다.


6. reduce()
=> 배열의 각 요소에 대해 주어진 reduce함수를 실행하고, 하나의 결과값을 반환합니다.
=> 배열의 값을 단일 값으로 결합할 떄 매우 유용한 메서드이다.

arr.reduce(callback, initialValue)
allback : 배열의 각 요소에 대해 실행할 함수. 다음 네 가지 인수를 가짐

accumulator : 누산기. 콜백의 반환값을 누적. 콜백의 이전 반환값 또는, 콜백의 첫 번째 호출이면서 initialValue를 제공한 경우에는 initialValue의 값임
currentValue : 처리할 현재 요소
currentIndex (Optional) : 처리할 현재 요소의 인덱스. initialValue를 제공한 경우 0, 아니면 1부터 시작
array (Optional) : reduce()를 호출한 배열

initialValue (Optional) : callback의 최초 호출에서 첫 번째 인수에 제공하는 값. 초기값을 제공하지 않으면 배열의 첫 번째 요소를 사용. 빈 배열에서 초기값 없이 reduce()를 호출하면 오류 발생

=> 기존의 배열은 수정되지 않는다. 리턴 값은 새로운 배열이다.


7. split()/ join()
split() => 문자열을 여러 조각의 배열로 나눈다. 인자로는 1. 나뉘주는 기준인 구분자를 지정한다. 2. 만들어질 요소의 개수를 제한하는 인자
join() => 배열을 하나의 문자열로 만드는 방법이다. 인자로 string이 들어간다. 서로 다른 배열을 문자열로 합칠 떄 중간에 들어갈 문자열을 지정하는 것이다.





























