JavaScript Section 9-3 (229 ~)

1. this(JS-this)

1-1. 일반 함수 실행 방식 (Regular Function Call)
일반 함수 실행 방식으로 함수를 실행했을 때 this의 값은 Global Object를 가리킨다. (브라우저 상에서는 window 객체)

ex) var age = 100;
 
function foo () {
  var age = 99;
  bar(age)
}
 
function bar () {
  console.log(this.age);
}
 
foo();
=> strict모드나 let,const는 1의 경우에 항상 undefined가 반환된다.


1-2. 도트 표기법 (Dot Notation)
Dot Notation으로 함수가 실행되면, this는 그 도트 앞에 써있는 객체 자체를 가리킨다

ex) var age = 100;
 
var ken = {
  age: 35,
  foo: function () {
    console.log(this.age);	// 35
  }
}
ken.foo();
=> 위 코드에서 this.age의 this는 ken을 가리킨다. 그러므로 this.age는 ken.age와 같기 때문에 35가 출력된다.
=> let,const,var다 같은 로직으로 움직인다.
=> 이 경우는 함수를 직접 실행시킨 경우에만 의미가 있다. 이벤트리스너는 생각한 대로 움직이지 않는다는 것.

=> this는 호출한 함수의 앞의 객체를 참조한다고 보면된다. 아무것도 없으면 당연히 window객체를 참조하는 뜻이고 window는 전역객체이다.



2. 메서드 축약어 구문

ex) const newMovie = {
    info: {
      title,
      [extraName]: extraValue
    },
    id: Math.random().toString(),
    getFormattedTitle() {
      console.log(this);
      return this.info.title.toUpperCase();
    }
  };

=> getFormatteredTitle을 보면 키 : 값으로 이루어져 있지 않다. 축약어 버전이다.
=> 함수이름 () {로직} => 메서드를 작용한다.
=> 화살표 함수는 사용하면 안된다.


3. This 키워드와 이상한 작동 방식
this가 참조할 사항을 미리 구성할 떄 bind()를 사용한다.
bind()의 첫 번쨰 인자는 함수 내에서 this가 참조로 할 대상을 가리킨다.


4. bind(), call(), apply()
bind, call, apply의 첫 번쨰 인자는 this가 참조할 객체이다.
bind는 함수를 직접 실행시키지 않는다. call과 apply는 함수를 바로 실행시킨다.
bind,call,apply의 두 번째 인자부터는 함수가 가질 매개변수를 넣는다.
bind,call은 리스트 요소로 넣고 apply는 배열로 넣는다.


5. 브라우저가 this에 하는 작업
이벤트 리스너에서 함수를 bind하거나 set할 때 => this가 예상대로 움직이지 않는다. => 함수를 실행시킨 경우에만 bind,apply,call의 this 참조할 객체를 제대로 설정한다.

브라우저는 이벤트 리스너에서 이벤트를 트리거하는 DOM요소에 this를 바인딩한다.


6. this와 화살표 함수
화살표 함수는 this를 모른다.
화살표 함수내의 this와 전역객체에 존재하는 this는 역할이 같다.

화살표 함수의 this는 언제나 상위 스코프 this를 가르킨다.


7. Getter/Setter




8. this
this => 선언이 아닌 호출에 따라 달라진다.
일반 함수 호출은 언제나 window객체를 부른다. (생으로 this를 부르거나)

암시적 바인딩 =>  속성 접근자(점 연산자)를 통해 객체의 메소드를 호출하는 형태를 의미합니다.
명시적 바인딩 => 명시적 바인딩은 Function.prototype에 정의되어 있는 call, apply, bind 메소드를 이용해 this를 바인딩하는 것을 말합니다. 

call : 함수를 호출하면서 this를 바인딩합니다. 인자를 쉼표로 구분하여 받습니다.
apply : 함수를 호출하면서 this를 바인딩합니다. 인자를 배열로 받습니다.
bind : 함수를 호출하지 않고 this를 바인딩한 새로운 함수를 반환합니다.

bind로 한 번 바인딩되면 그 이후로 바뀌지 않습니다.

화살표 함수 this => 화살표 함수는 정의 시점에 상위 스코프의 this를 가리키는 정적인 방식으로 this가 결정됩니다.

콜백함수안의 this는 일반함수호출과 같다. => window객체를 바라본다.












































