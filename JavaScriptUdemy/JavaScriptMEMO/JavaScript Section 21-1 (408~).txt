1. 프로젝트 제한 & 도구가 필요한 이유
스크립트 파일을 여러 개로 분리하여 사용하면(모듈) HTTP 통신으로 스크립트 파일이 통신한다. 이때 비효율성이 야기될 수 있음으로 JS 도구를 사용한다.

JS 도구를 사용해야 하는 이유
1. 모듈을 그냥 적용하면 CORB의 제약이 걸리고 CORB의 제약을 풀기위해 서버에서 스크립트를 실행하면 대형 프로젝트를 경우 많은 HTTP 통신 요청으로 성능의 제약이 걸릴 수 있다.

2. JS 코드는 최적화가 필요하다. => 변수의 이름이 길다면 브라우저가 다운로드할 용량이 커지는 것이다. 이때 도구를 사용하면 개발자가 보는 코드 명은 그대로인데 브라우저나 컴퓨터가 읽는 스크립트의 변수명은 간단명료하게 바뀌어 읽을 수 있다.

3. 브라우저 지원 문제를 해결할 수 있다. => 구형 브라우저에서는 지원되지 않은 기능들을 도구가 서포트 한다.

4. 개발하거나 개발한 코드를 수정한 것을 보기 위해서 브라우저 새로 고침이 필요하다. => 이를 자동으로 도구가 해결해 준다.

5. 코드 품질을 향상시켜준다. 


위의 사항을 개선하기 위한 도구들은 이미 만들어져 있다.
개발 서버 - webpack-dev-server or serve - 자동 새로고침
버들링 도구 - Webpack - 모듈로 분할된 코드들을 결합한다.
코드 최적화 도구 - webpack Optimizer Plugins - 함수의 이름을 축약하거나 공백을 제거하는 최적화 기능
Code Compilation Tool - Babel - 최신 코드를 작성하더라도 구형 브라우저에서 돌아가게 해주는 기능
Code Quality Checker - ESLint - 코드의 일관성이나 지켜야 할 규칙을 검사하는 기능


2. 워크 플로우 개요
































