1. 등호연산자나 부정연산자는 항상 불리언 값을 반환한다.
1 == 1 => true/ 1 === 1 => true/ 5 != 3 => true


2. and가 항상 or보다 우선순위가 높다.


3. 불리언을 반환하는 코드에 일반 문자열이나 숫자가 들어가면 JS는 강제로 불리언 값으로 변환하려고 한다.
"" 빈 문자열 => fasly/ 0 => falsy/ 일반 문자열이나 0을 제외하고 음수를 포함한 모든 숫자 truthy
모든 객체나 배열은 truthy/ NaN, undefined, null은 falsey


4. 문장과 표현식의 차이
무엇가를 반환한다 표현식/ 표현식+무엇가를 반환하지 않는 것(if/for etc..) 모두 문장이라고 부른다.


5. !!
논리 부정자를 사용하면 thrthy와 falsy의 값을 실제 불리언 값으로 변환시킨다.


6. 불리언을 반환하지 않은 코드에서의 연산자의 활용

||,&&은 값의 여부를 truthy나 falsy로 확인하고 true면 값을 반환하고 false면 값을 반환하지 않는다.
ex) const userName = 'Max'/ const userName2 = userName || 'mm' => userName 변수에 값이 존재하기에 userName2에 값이 들어가고 or의 속성에 의해서 뒤에거는 실행도 하지 않는다. 만약 둘다 false의 값이라면 뒤의 값을 선택한다.

&&의 경우 첫 번쨰 값이 참이면 두 번째 값을 반환하고 첫 번쨰 값이 거짓이면 첫 번째 값을 반환한다.


7. Switch Case

ex switch (){
  case 매개변수와 비교할 값 :
    일치했을 실행할 코드
  case 매개변수와 비교할 값 :
    일치했을 실행할 코드;
}


8. for
for => 기존적 알던 반복문과 같은 로직이다.

중첩반복문 => 외부 반복문이 한 번 실행될 떄 내부의 반복문을 전부 실행하고 외부 반복문으로 간다.
 ex) for(let i=0; i<10; i++){for(let k =1; k<=3 k++){sum+=i+k}} i가 0일 떄 k는 1~3까지 돌고 i가 1일 때도 마찬가지로 1~3돌고.. 이렇게 로직이 이루어진다.

for-of => 배열을 순차적으로 출력하고 싶을 떄 사용한다.
ex) for(const arr of 배열이름){console.log(arr)}


for-in => 객체의 키와 값을 출력하고 싶을 때 사용한다.
for(const obj in 객체이름){console.log(obj)} => 순차적으로 객체의 키만 가져온다.
for(const obj in 객체이름){console.log(객체이름[obj])} => 순차적으로 객체의 값만 가져온다.


11. do/while
조건이 충족될 때까지 반복을 해야하는 경우에 사용한다.

ex) while(조건){
  반복할 코드
   벗어날 코드 (i++ or i--)
}

do{
 반복할 코드
  벗어날 코드
} while(조건)

=> 둘의 차이는 do-while은 무조건 한 번은 실행한다. 조건식이 뒤에 있으니까.. while은 조건이 앞에있어서 조건에 충족되지 못하면 한 번도 실행안시킬 수 도있다.


12. break;
반복문의 실행을 중단시킨다. 다만 중첩반복문의 경우 내부 중첩문에 break가 있다면 내부 중첩문만 break걸리고 외부는 실행된다.


13. continue
반복문의 실행을 넘기고 다음 실행을 한다. 조건을 주었을 때 조건이 해당하는 것을 건너뛰고 다음 반복을 실행한다는 이야기이다.


14. Try-catch
try안의 코드가 실행된다. 에러가 없다면 마지막 줄까지 실행되고 catch를 건너뛴다. 에러가 발생하면 catch의 코드가 실행되고 catch(err) 에러 매개변수를 던진다.

try-catch는 런타임환경에서만 동작한다. 구문 오류는 잡지 못한다.























