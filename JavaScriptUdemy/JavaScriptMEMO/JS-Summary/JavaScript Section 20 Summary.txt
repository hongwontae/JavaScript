하나의 JS 스크립트를 쪼개서 여러 JS 파일로 만들 수 있다. 이 떄의 하나 하나를 모듈이라고 부른다.

html-script 로직
=> 브라우저에 의해 html이 로드되면 위에서 아래로 읽고 실행한다. 이 떄 script가 defer이면 html이 <script defer>를 만나는 순간 script도 동시에 다운로드 된다. 다만 html이 모두 실행되기 전까지는 JS파일이 다운만 받는다. HTML이 모두 실행된 순간 script가 실행된다. 다운된 스크립트 또한 위에서 아래로 실행된다. 그렇기 때문에 아래에서 위로는 참조 가능하지만 위에서 아래의 참조는 불가능하다. (모든 파일은 다운로드 되고 한 번만 실행되기 때문이다. 이벤트 리스너 같은거 뺴고)

export => export가 붙은 파일의 클래스, 상수, 변수, 함수 등을 내보낸다.
import => export가 내보낸 상수, 변수, 상수, 함수들을 import 구문으로 가져온다.

export 문법
=> 내보내고 싶은 class, 변수, 상수, 함수.. 등 앞에 export 키워드를 넣는다.

import 문법
=> import {가져올 class, 변수, 상수, 함수} from "경로/파일명.js" ({} 안에는 가져올 이름만 적어도 된다.)
=> import {class, func1...} from "" => 여러개를 가져올 수 있다.
=> import * as alies from "" => 주소의 export 문을 모두 가져와서 alies 객체안에 넣는다고 생각하면 된다.
(alies.export 항목)
=> import {가져올 항목명 as 별칭} from "" => 별칭을 사용할 수 있다.

default 문법
default 클래스, 변수, 상수, 함수에 적용할 수 있다. default는 4가지 여타 항목의 이름을 제외하고 사용해도 된다.
import 할 떄는 import 변수명 from "" => default한 항목을 가져온다.
default는 파일 마다 한 번만 사용이 가능하다.


import() => 동적으로 import 하고 싶을 떄 사용한다. 위의 HTML-SCRIPT 로직에 의해서 export-import 로직이 실행되면 소규모 작업은 페이지 로딩 시간이나 성능의 차이는 없지만 큰 규모의 프로젝트에서는 불편함을 야기할 수 있다.
필요할 떄 import가 되어서 scirpt가 실행된다면 첫 페이지 로딩 속도나 성능 등의 효율성이 좋아진다.
=> 가령 이벤트 리스너를 경우 꼭 처음에 다운받아서 실행할 필요가 없다.

import()는 Promise 기반 함수이다. import().then(module => module.import 로직들)
module의 객체안에 import한 export들이 있다.


module 파일 안에서 this를 사용하면 undefined가 반환된다. => 자동으로 엄격모드가 실행되는 것이다. 원래는 window가 반환된다. 이 떄 globalThis를 사용하면 비엄격 모드 this처럼 행동한다.


{} 주소 로직
./ 동일한 폴더
.. 한 칸 위의 폴더
.으로 시작하면 상대경로, /만 있으면 절대 경로이다.

























 