웹 페이지의 사용자와 상호작용하기 위해 만든 코드 => 이벤트
이벤트를 사용함으로써 이용자의 정보나 선택사항을 받아들이고 이에 해당하는 웹 페이지 변경 및 정보 반환

이벤트가 트리거 되었을 떄 함수가 실행되는데 이를 이벤트 핸들러라고 칭한다.

이벤트를 만드는 3가지 방법
1. HTML에서 속성으로 onclick, onmouseenter, ...ect을 주는 방법
=> html 코드내에서 js코드 있기에 비효율적이다.
2. JavaScript에서 DOM객체의 프로퍼티의 이벤트 트리거를 붙이고 함수를 할당하는 방법
=> 이 방법은 하나의 함수만 가질수 밖에 없음으로 비효율적이다. 
3. DOM에 addEventListener()를 주는 방법
=> 첫 번쨰 인자는 이벤트 트리거를 문자열로 받는다. 이떄 js프로퍼티나 HTML 속성에서는 on이 붙지만 리스너는 붙지 않는다. 두 번쨰 인자로는 함수를 받는다. 세 번쨰 인자는 캡쳐링의 여부이다. 기본적으로는 false이다.

이벤트 리스너의 이벤트 핸들러 삭제 방법
removeListener()/ 첫 번쨰 인자로 삭제할 이벤트 , 두 번쨰 인자로 삭제할 함수를 넣는다. 두 번쨰 인자는 같은 주소값을 가져야 한다.

이벤트 객체는 브라우저에서 자동으로 생성되고 이벤트 핸들러가 작동될 떄 자동으로 이벤트 핸들러에 할당된다.
=> div.addEventListener('click', (event)=>{
   event.preventDefault();
   console.log(event);
}) => 이 행위가 가능한 이유이다.

event.target => 이벤트가 발생하는 영역을 의미한다. 이를 통해서 get이나 set를 사용할 수 있다.

preventDefault() => 각 이벤트들은 



















