1. 프로미스 시작하기
수많은 콜백함수가 겹쳐져 있는 경우 => 읽기도 어렵고 해석하기도 어렵다.
=> 이를 콜백지옥 (callback hell)이라고 부른다.

위의 사안을 해결하기위한 것이 프로미스이다.

오래된 구문들은 프로미스를 지원하지 않는다. (setTimeout()같은 경우..)

프로미스는 JS에 내장된 클래스라서 생성자 함수를 통해 만들 수 있다. (const promise = new Promise();)
이 프로미스는 함수를 인자로 받는다. 이 함수는 프로미스 API라서 프로미스가 생성될 때 바로 실행된다.
=> 생성자 내부에서 바로 실행된다. new Promise()의 함수 본문이 바로 실행되는 것이다.

생성자의 인자의 함수의 매개변수는 두 개가 들어간다. 보통 이름은 resolve, reject로 짓는다.

프로미스에 then을 추가하면 이 프로미스가 무엇을 해결하든 실행한다.


2. 다수의 프로미스 체이닝(Chaining)
Promise의 then인자에 또 다른 콜백함수를 반환하면 원래 프로미스는 fulfilled에서 pending으로 바뀌게 되고 반환된 함수를 해당 프로미스가 해결할 떄까지 기다려야 한다.

then()은 프로미스의 메서드이다. 이 함수는 프로미스가 이행되거나 거부될 떄 실행될 콜백함수를 취한다.

프로미스가 이행되면 .then() 함수는 프로미스의 결과를 콜백 함수의 첫 번째 인수로 전달한다. 프로미스가 거부되면 .then() 함수는 프로미스의 오류를 콜백 함수의 첫 번째 인수로 전달한다.

.then() 함수는 Promise를 반환하므로 .then() 함수를 체인으로 연결하여 여러 비동기 작업을 연결하는 데 사용할 수 있다.
























