1. 웹팩으로 번들링하기
module로 나눠서 스크립트를 작성하여 배포한다면 많은 HTTP 요청으로 인해 성능의 저하가 올 수 있다.
=> webpack를 이용하면 분산된 module를 하나로 합친 코드로 만들어서 배포하여 효율성이 증가한다.

웹팩 => html의 다수의 스크립트 파일들을 하나의 파일로 만들어주는 기능을 한다.

webpack은 Node.js의 npm을 통해 설치된다.

webpack 설치방법
npm install --save-dev webpack webpack-cil
(webpack-cil를 이용하면 API로 webpack과 상호 적용할 수 있다.)

webpack 설정
webpack의 설정파일은 수동으로 만들어야 한다. root 위치에 webpack.config.js를 만든다.
webpack.config.js는 Node.js에 의해 실행되거나 사용한다.

** Node.js에서 내보내는 방식
exports 키워드 대신 exports = {}; 사용한다. 이 객체를 파일 밖으로 내보내는 구문이다.
module.exports = {}; => 설치한 webpack이 이를 보고 webpack를 구성한다.


webpack.config.js의 객체

1.Entry
엔트리 포인트는 웹팩이 번들링을 시작할 메인 파일이다. webpack은 엔트리 포인트의 import를 확인하여 관련된 의존성을 분석하고 파악한다.

2. output
번들파일 자체 설정 filname, path

__dirname => 현재 경로에 대한 엑세스를 준다.
__dirname, 'assets', 'scripts' => 현재 위치의 assets의 폴더의 script 폴더에 대한 접근할 수 있다.


package.json에 scripts 키에 "build" : "webpack"를 주면 내부에서 webpack-cil 사용한다.
=> webpack-cil를 사용한다는 것은 명령어를 통해 webpack를 제외할 수 있다는 뜻이다.
=> npm run build를 통해 webpack를 실행시킬 수 있다.

webpack은 import의 확장자를 추가할 수 없다. => .js를 빼야 한다.


2. 개발 모드 & 지연된 로딩 해결하기
ARNING in configuration
The 'mode' option has not been set, webpack will fallback to 'production' for this value.
=> 개발자는 개발을 위한 코드인지 배포를 위한 코드인지 Webpack에 알릴 수 있다. 디폴트 값은 production, 배포이다.

개발 모드를 원한다면 webpack.config.js에 mode : 'development' 프로퍼티를 주어야 한다.


3. webpack-dev-server 이용하기
변경할 떄마다 자동으로 새로고침되는 서버를 구축하고 싶다.
npm install --save-dev webpack-dev-server => 자동 새로고침되는 서버를 구축하기 위한 module를 다운로드한다.

webpack.config.js의 module.exports에 프로퍼티로 devServer : {contentBase : JS를 읽어오는 HTML파일}
=> 만약 config.js파일과 HTML파일의 위치가 같은 레벨이라면 위의 프로퍼티를 생략해도 된다.

이후 package.json의 scripts에서 build : webpack-dev-server를 작성하면 이 명령어는 webpack도 실행하지만 개발서도 실행하는 명령어이다. 또한 변경사항이 있을 떄마다 개발 서버를 자동으로 새로고침한다.


4. 소스맵 생성하기
network를 보면 HTTP 통신을 통해서 가져오는 파일은 세 개이다. (HTML, CSS, JS)
source를 보면 JS 파일은 webpack을 통해서 여러개의 파일이 하나로 된 파일이기 때문에 알아보기 힘들다.
=> 즉, 디버깅이 어렵다는 것이다.


5. 배포용 구축하기
배포용 코드는 출력 파일을 가능한 작게 만들고 속도를 높여야 하는 것이 목적이다.
이를 위해서 다른 webpack.config.prod.js를 작성한다.
mode : production, devtool : none or cheap-source-map으로 설정한다.
=> 다른 설정은 같게 하고 위의 사안만 바꿔준다. 위의 devtool은 코드 모드 웹팩보다 완벽한 디버깅 소스는 아니지만 최소 특정 수준의 코드까지 살펴볼 수 있게 해준다.

package.json의 scripts의 프로퍼티로 명령어를 사용할 떄 prod.js를 바라보게 할 수 있다.
"build:dev" : webpack --config webpack.config.prod.js => webpack를 구성할 떄 배포모드를 구성한다.

이를 통해서 package.json의 명령어는 개발 웹팩을 만들어서 서버를 가동시키거나 배포 웹팩을 만드는 두 가지 명령어가 존재한다.


6. 최적화 마무리
clean-webpack-plugin => webpack.config에서 require('clean-webpack-plugin')을 통해서 최적화나 생성된 출력에서 변화를 적용할 수 있도록 한다.
=> 이렇게 설정을 하고 npm run build:prod를 실행하면 사용하지 않은 scripts 폴더의 webpack된 파일들을 삭제한다.

캐시를 이용하게 하지 않고 새로운 빌드를 할 떄마다 새로이 파일을 다운받게 하고 싶은 경우
config.prod.js의 webpack 설정파일의 output filname에 '[contenthash]파일 이름.js'를 설정한다.
=> 변경사항이 있을 때마다 브라우저가 다시 다운로드하여 배포한다.



































