1. html-js 연결(basics-01-starting-project)
1-1. head에 <script>JS 코드</script>
1-2. <script src ="js파일 위치"></script> => src는 "" 사용한다. (''가능 but src에 쌍 다옴표는 개발자들의 법칙이다.) => 이 때의 문제점은 스크립트가 완료되기 전까지는 페이지가 렌더링되지 않는다.
1-3. <body> 위에 <Script src=""><script> => 페이지가 렌더링되고 js를 읽는다.


2. 변수와 상수
데이터 컨테이너 => 변수
변수 명명 규칙 => let/var/const 변수 이름 =  데이터
변수는 언제든지 재할당이 가능하다. 또한 재할당 시에 let같은 키워드를 뺴고 재할당이 가능하다.

const => 상수
값이 고정되어 있다. 재할당이 불가능하다. => 재할당이 불가능하다는 뜻을 잘 이해해야 한다.

변수의 이름은 카멜케이스를 따라야 하고 숫자로 시작해서는 안된다. 또한 특수문자로 시작해도 되지만 권장되지 않는다.

변수의 초기화 작업에서 값을 부여하는 것은 개발자의 선택이다.


3. 데이터 타입
Number => 일반적인 숫자
String => 작은 따옴표, 큰 따옴표, 백틱으로 변수를 선언할 수 있다.

숫자끼리의 + 연산자는 말 그대로 계산을 한다.
but 문자열+숫자/ 문자열+문자열의 + 연산자는 이어 붙이는 역할을 한다.

-- 자바스크립트는 위에서부터 아래로 실행되기 때문에 변수명이 겹치면 맨 아래의 변수를  사용한다.


4. 문자열 (basics-05-added-template-literals)
"",'' => 사용자가 선택해서 사용하면 된다.

`` => 백틱이라고 한다. 문자열로 취급하지만 ${} 안에서는 변수의 사용이 가능하다.
ex) `code ${currentValue} good job` => code 7 good job
예제와 같은 과정 전체를 템플릿 리터럴이라고 부른다.

이 템플릿 리터럴은 JS코드 내에서 줄바꿈을 해서 작성하여도 코드가 유지된다.
ex) `code ${currentValue} 

good job` => 위와 같은 결과가 나오며 유효한 코드이다./ 실제 웹페이지는 붙여서 나온다.
CSS로 white-space : pre;를 설정하면 백틱의 구조와 같게 나온다. 그렇기에 가독성만을 위해서 백틱의 위치를 임의적으로 바꾸면 안된다.

그렇다면 "", '' 문자열은?
ex) let a ="ㅁㄴㅇㅁ

ㄴㅇ" => 이런 형태는 백틱과 다르게 JS 문자열 타입 문법에 어긋난다. 작은 따옴표도 마찬가지이다.

이런 형식을 만들고 싶다면?
ex) let b = "asd /n"+"asdasd"
=> "asd
    asdasd"의 형태가 된다.

\n => 줄바꿈기능, \\ => \(백슬래시 출력), \' => 작은 따옴표 출력기능
=> sql의 %_\를 출력해주는 백슬래시 기능과 비슷하다.















