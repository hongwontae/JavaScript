1. 동기 코드 실행 이해하기 ("Sync Code")
JavaScript는 단일 쓰레드이다. => 알고 있었다.
=> 단일 쓰레드라는 말은 한 번에 한 가지 일만 할 수 있다는 것이다.

a : console.log()
b : func()
c : moreCode()
d : button.disabled = true;

JS는 위에서부터 아래로 코드를 읽어드린다.
(함수 선언문이나 var 같은 경우를 제외하고..)
b의 함수가 호출되어 완료되기 전까지 c는 실행되지 않고 기다린다. b가 사실상 c의 실행을 막고 있는 것이다.
=> 순차적으로 실행된다. 이는 JS 코드에서 DOM을 먼저 만들고 addEventListener를 만드는 이유이기도 하다.


2. 비동기 코드 실행 이해하기
console.log() => setTimeout() => moreCode()
=> setTimeout()의 시간이 길다면 결국 코드의 성능이 떨어지는 효과를 일으킨다.
=> setTimeout()이 다른 코드의 실행을 막고 있다.

위의 현상을 해결하기 위해 JS와 브라우저는 비동기 코드 실행을 한다.
시간이 오래 걸리는 작업을 하는 코드를 브라우저에서 오프 로드(off-Load)시킬 수 있다.

위의 코드를 예시로 들어 setTimeout()를 호출하여 브라우저에 타이머를 설정한다. 즉, 브라우저가 쓰레드 역할을 하게되고 setTimeout()이라는 함수를 브라우저에서 관리하게 되는 것이다. => 이러한 구조 떄문에 JS의 코드는 막히지 않는다.

위 같은 현상 때문에 JS와 Browser가 의사소통할 수단이 필요하다. 그 방법으로 콜백함수를 사용한다.
setTimeout()이 브라우저에서 관리되고 콜백함수가 브라우저에서 연산이 끝나면 호출할 함수가 되고 브라우는 다시 스크립트로 돌아가서 함수를 실행한다.

브라우저가 JS 코드의 실행을 간결하고 효율성있게 만들어준다.


3. 코드 차단하기 & "이벤트 반복문"



















