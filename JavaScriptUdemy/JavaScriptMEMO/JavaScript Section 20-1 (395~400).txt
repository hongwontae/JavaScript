1. 차선택을 이용해 코드 분할
모든 로직을 한 파일에 넣는 것은 비효율적이다. 다중 파일로 작업을 한다면 협업이나 오류를 찾기 쉽다.

전의 드래그 앤 드롭 로직 코드를 분할해보자.
하나의 파일의 코드들을 분할해서 여러 JS 파일로 이동시킨다. => 순서에 맞게 HTML에 script 파일을 Import한다.

위처럼 작업했을 떄 작은 작업이면 괜찮지만 큰 프로젝트의 경우 이러한 작업이 버그나 오류를 일으키기 쉽다.
=> 이를 개선하기 위해서 JS Module를 사용하는 것이다.


2. JavaScript 모듈을 향한 첫 번쨰 단계
export => 이 키워드의 JS 클래스를 다른 파일에서도 사용할 것이라는 신호를 보내는 것이다.
이후에 html 마지막 script를 임포트한 곳에 가서 type='module'를 선언한다.

** js 파일이  HTML <script>로 import 되면 아래에서 위는 참조가 가능하지만 위에서 아래 참조는 불가능하다.


3. 개발 서버가 필요합니다!
제 3자 라이브러리를 사용하려고 할 떄 라이브러리가 손상되었거나 악성코드가 존재하는 파일을 다운로드 할 수 있다.
위의 사안 떄문에 교차 출저 요청 정책이 존재한다.

교차 출저 요청 정책
교차 도메인 간 요청은 허용되지 않으며 실행 중인 페이지와 동일한 도메인에서만 스크립트를 다운로드 할 수 있다.
파일 프로토콜을 사용하기 때문에 type="module" 오류가 발생한 것이다. => 웹 서버를 사용해야 한다.
=> node.js 설치하자


4. 첫 번쨰 임포트/ 내보내기 작업
export를 사용했더라도 바로 전역 사용이 가능한 것은 아니다.
export의 대상 파일을 사용할 JS파일이 특수 구문을 사용해야한다.
=> import {가져올 요소} from '경로';
=> 가져올 요소는 여러 개여도 무관하다.

경로
상대경로는 .으로 시작한다. ./는 동일한 폴더를 나타낸다. ..은 한 칸 위 폴더를 의미한다.
/만 있다면 절대경로를 설정하는 것이다. 

HTML의 <script>에 type="module"를 맨 마지막 <script>와 export를 가져와서 import한 js 파일에도 적용시킨다.
=> 오류없이 작동한다.

import 구문을 통해서 어떤 파일을 가져왔는지 쉽게 구별이 가능한다.
export import를 통해 가져오기 순서에 대해서 신경 쓸 필요가 없어진다.


5. 모든 파일들이 모듈을 사용하도록 전환하기
맨 마지막 <script>의 module를 설정하고 엔드포인트로 만들고 다른 js 파일들은 export-import를 통해 관계를 설정하자. => HTML 코드는 script 하나만을 가지고 있기에 코드가 효율적으로 변한다.
































