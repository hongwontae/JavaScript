1. 브라우저 저장소 옵션
웹페이지를 기준으로 application를 만든다면 브라우저와 서버는 밀접한 연관를 맺고 있다.
브라우저는 JS를 통해 접근하고 서버는 서버 측 언어를 통해 접근한다. 이때 데이터를 주로 저장하고 있는 곳은 서버측 데이터 베이스이다. 브라우저 또한 데이터를 저장할 수 있는 저장소 매커니즘이 존재한다.

서버에 저장되는 데이터는 보안이 필요한 데이터나 중요한 데이터가 저장된다. (ID, Password, 개인정보등..)
브라우저 저장소에 저장되는 데이터는 일시적이면서 간편하고 간단하게 사용될 수 있는 데이터가 저장된다. (세션ID, 주문내역, 페이지의 체크사안 등...)

브라우저 저장소는 3가지가 존재한다. (LocalStorage&SessionStorage, Cookies, IndexDB)

1. 로컬&새션 스토리지
키-값으로 구성되어 있는 JS 객체처럼 파일에 저장한다. 분석키나 사용자의 세션 ID등을 저장한다.
로컬 저장소는 사용자 설정이나 기본 사용자 데이터를 관리한다. 로컬 저장소는 JS언어로만 통신이 가능하다.
=> 단순한 키-값을 저장하는 용도이기 때문에 로직이 복잡한 데이터를 저장하는 저장소로 적합하지 않다.

2. 쿠키
1과 마찬가지로 키-값으로 구성되어 있는 저장소이다. 다만 다양한 방법으로 구성할 수 있다.
(미래의 어느 시점에 데이터를 삭제해야 하는데 쿠키는 엔트리 중 하나에 옵션으로 설정가능하지만 로컬 저장소는 js와 통신하는 과정을 거쳐야 한다.) JS 통신으로 접근이 가능하다.
로컬 스토리지보다 사용하기에 투박하다. 좋은 API를 갖고 있지 않다.
1의 저장소들과 다르게 쿠키는 서버에서 읽을 수 있다. 요청하는 헤더 안에 발신 HttpRequest가 추가되어 있다.
=> 1의 저장소들과 마찬가지로 키-값 저장하는 저장소이기에 복잡한 데이터 저장에는 적합하지 않다.

3. IndexDB
Client DataBase이다. 브라우저에 빌트인되어 쿼리 언어를 사용할 수 있다. 레코드와 테이블이 존재하여 복잡한 데이터를 다루는데 적합하다. JS로 접근이나 삭제가 가능하다. 
=> 복잡한 데이터를 다루는데 좋지만 API의 다양성이 떨어진다.


2. 로컬 Storage And 세션 Storage
로컬 스토리지의 접근은 개발자와 사용자 둘 다 가능하다. 또한 둘 다 키-값을 추가하거나 제거할 수 있다. 쉽게 조작이 가능해서 단일 진실 공급원(SSOT)으로 취급해서는 안된다.

JS에서 값을 저장할 떄 JS는 무조건 toString을 호출해서 저장한다. 값이 객체일 경우 Object Object로 저장된다.
객체를 저장하고 싶다면 JSON.stringify를 이용한다. (JSON 데이터 자체는 문자열이다. 다만 컴퓨터가 읽을 수 있는 문자열 형태인 것이다)
그 값을 재사용하려면 JSON.parse() 메서드를 이용한다.
=> 객체를 저장하고 싶다면 위의 로직을 따르면 되지만 지나친 사용은 데이터 손실을 야기할 수 있다. 애초에 JSON 데이터가 아니기 때문에 많은 값을 JSON으로 변환하고 JS로 가져오는 과정에서 데이터 손실이 발생하거나 브라우저의 공간이 없을 떄 사용자로부터 삭제될 수 있다.


로컬 Storage 프로퍼티와 메서드
localStorage => JS 로컬 저장소 객체

localStorage.setItem('','') => 로컬 저장소에 키-값을 저장하는 메서드, 키는 문자열이고 값은 문자열이나 숫자
이렇게 저장을 하면 Chrome의 검사-애플리케이션-로컬 스토리지에 저장되어 있다.


세션 Storage는 로컬 Stroage와 거의 같다. 하지만 세션 저장소의 데이터는 브라우저가 열려 있는 동안 남아있고 브라우저를 닫으면 세션 저장소의 데이터는 삭제된다. 로컬 저장소의 데이터는 용량 부족으로 인한 사용자의 삭제나 브라우저가 삭제하지 않은 한 데이터는 저장은 지속된다.


3. 쿠키
쿠키는 전송되는 HTTPRequest에 연결되어 있다. 쿠키는 서버에서 저장할 수 도 있고 클라이언트에서 저장할 수 있다. 양쪽에서 저장하고 사용할 수 있다.
쿠키는 웹 페이지가 실제 서버로 제공되는 경우에만 사용가능하기 때문에 file HTML은 쿠키를 인식하지 못한다.

document.cookie => 쿠키 객체

브라우저의 애플리케이션의 쿠키는 서버로 제공된 웹 페이지만 사용가능하고 이 떄 브라우저와 서버 양쪽에서 접근하거나 추가하거나 삭제할 수 있다. 서버의 접근만 가능토록 할 수 있는 HttpOnly라는 플래그가 존재한다.


4. 쿠키로 작업하기

*** 쿠키나 로컬,세션 저장소에 객체를 그냥 저장하면 내부적으로 toString이 적용되어 Object Object가 저장된다.
    하지만 JSON.stringify를 통해 JSON 데이터를 만들면 이 데이터는 문자열인 채로 꺠지지 않고 저장된다.
      꺼낼 때는 일반 문자열로 인식되어서 그냥 사용된다. => 문자열 메서드를 그냥 사용할 수 있다.

쿠키자체의 프로퍼티는 존재하지 않아서 다루기에 편하지 않다.

쿠키의 장점은 데이터를 만료시킬 수 있고 서버와의 통신이 용이하다는 것이다.

일반적으로 쿠키는 세션이 종료될 떄 쿠키의 데이터는 삭제된다. 다만 설정을 통해 기간을 정할 수 있다.
document.cookie = `uid2=${user}; max-age=2`; => 키=값; max-age=second 를 통해서 만료초를 정할 수 있다.
document.cookie = `uid2=${user}; expires=data`; => 키-값; 날짜 를 통해서 만료날짜를 정할 수 있다.
(expires의 날짜 데이터는 형식은 MDN 문서에서 확인할 수 있다.)

cookies의 데이터는 문자열 형식으로 반환되어 개발자의 효율성을 위해서 split()를 통해서 배열로 만들어서 사용을 한다. 이떄 만료시점에 따라 인덱스가 달라짐으로 인덱스 접근보다 [key] 접근을 하는 것이 안전하다.


5. IndexDB

인덱스 DB는 객체를 저장한다. 이 여러개의 객체를 저장하는 곳을 Object Store라고 부르고 Object Store를 가진곳을 DataBase라고 부른다. 3단계 tree구조이다.

IndexDB의 특징
1. 많은 양의 구조화된 데이터를 저장할 때 유용하다.
2. JS가 인식할 수 있는 자료형과 객체를 저장할 수 있다.
3. 키, 값 형태로 데이터가 저장되며 문자열 타입이 아니어도 된다.
4. 비동기적으로 작동한다

IndexDB의 작동순서
1. 데이터베이스 열기
2. 데이터베이스에 객체 저장소(Object store) 생성하기
3. 트랜젝션(Transaction) 시작하기 (데이터 읽기, 쓰기 제거 등 데이터베이스 작업 요청)
4. 이벤트 리스너를 사용하여 요청이 완료될때까지 기다리기
5. 요청 결과를 가지고 어떤 동작하기


1. 데이터 베이스 생성하기
const dbReq = window.indexedDB.open('dataBase이름',version)
=> open메서드는 DB를 생성하는 메서드가 아니다. DB를 생성할 dbRequst 객체를 준다.

2. DB에 접근하기
dbReq.addEventListener('success',(event)=>{
	db = event.target.result;
})
=> 'success' db가 생성되거나, db가 존재하거나, db를 열었을 떄 이벤트 트리거를 실행한다.
=> event.target은 dbReq를 가르키며 deReq의 result 프로퍼티는 생성된 DB를 가르킨다. 생성된 DB에 엑세스할 수 있다.

3. ObjectStore 생성하기
ObjectStore는 upgradeneeded 이벤트의 이벤트 핸들러 안에서 만드는 것이 제일 좋다.
upgradeneeded => 데이터를 업그레이드할 이유가 있을 떄 트리거된다.

- 데이터의 변동사항이 생겼을 떄 server의 dataBase의 변경은 쉽지만 indexDB는 어렵다. client, 각각의 이용자의 브라우저마다 indexdb의 데이터를 수정하는 것은 까다롭기 떄문이다 => 그렇기 떄문에 open에 버전 인자가 존재하는 것이다.

upgradeneeded는 open의 version이 달라졌을 떄 trigger된다.
=> ObjectStore를 만들어낼 좋은 이벤트이다. 버전이 올라갈 떄만 실행되니까..

db = event.target.result => indexdb에 엑세스한다.
db.createObjectStroe(OS Name,{keyPath : '', autoIncrement : true} )
 => ObjectStore를 crate한다. 첫 인자는 OS이름, 두 번쨰 인자는 데이터, 데이터 안에서 keyPath는 객체의 식별자로 작동한다. autoIncrement : true를 줄 수 있다. 식별자가 자동으로 증가

4. ObjectStore에 데이터를 추가하기
db에 엑세스할 수 있는 변수를 가져와서 transaction 메서드를 실행한다.
=> db.transaction(OS Name, readonly, readWrite..) 인자를 추가한다.
메서드 체인으로 ObjectStore() 메서드를 실행한다.
=> .ObjectStore('topics')

ex) let store = db.transaction('topics', 'readwrite').objectStore('topics');
=> 이 상태가 되면 추가할 엑세스가 store에 생긴다.

store.add({}) 메서드 실행으로 값을 OS에 넣는다. 사후처리하기 위해서 store.add({})를 변수에 넣는다.
=> 변수에 넣지 않아도 OS에 들어간다.

해당 변수의 이벤트 success를 걸면 값을 add한 후 작업을 시행할 수 있다.

5. OS get하기
let store = db.transaction('topics', 'readonly').objectStore('topics');
=> OS에 get할 엑세스가 store에 생긴다. get은 readonly

let getReq = store.get(id);
=> get(id) OS에서 id에 해당하는 값을 가져온다.

6. OS 모두 get하기
let getAllReq = store.getAll();
=> OS에 있는 모든 값들을 가져온다.

7. OS 수정하기
let store = db.transaction('topics', 'readwrite').objectStore('topics');
=> readwrite
let putReq = store.put({
                id:Number(prompt('id?')),
                title:prompt('title?'),
                body:prompt('body?')
            });
=> 해당 id를 기준으로 title과 body를 수정한다.


7. OS 삭제하기
let deleteReq = store.delete(Number(prompt('id?')));
=> id에 해당하는 OS 값을 삭제한다.















































