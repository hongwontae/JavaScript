1. 브라우저 저장소 옵션
웹페이지를 기준으로 application를 만든다면 브라우저와 서버는 밀접한 연관를 맺고 있다.
브라우저는 JS를 통해 접근하고 서버는 서버 측 언어를 통해 접근한다. 이때 데이터를 주로 저장하고 있는 곳은 서버측 데이터 베이스이다. 브라우저 또한 데이터를 저장할 수 있는 저장소 매커니즘이 존재한다.

서버에 저장되는 데이터는 보안이 필요한 데이터나 중요한 데이터가 저장된다. (ID, Password, 개인정보등..)
브라우저 저장소에 저장되는 데이터는 일시적이면서 간편하고 간단하게 사용될 수 있는 데이터가 저장된다. (세션ID, 주문내역, 페이지의 체크사안 등...)

브라우저 저장소는 3가지가 존재한다. (LocalStorage&SessionStorage, Cookies, IndexDB)

1. 로컬&새션 스토리지
키-값으로 구성되어 있는 JS 객체처럼 파일에 저장한다. 분석키나 사용자의 세션 ID등을 저장한다.
로컬 저장소는 사용자 설정이나 기본 사용자 데이터를 관리한다. 로컬 저장소는 JS언어로만 통신이 가능하다.
=> 단순한 키-값을 저장하는 용도이기 때문에 로직이 복잡한 데이터를 저장하는 저장소로 적합하지 않다.

2. 쿠키
1과 마찬가지로 키-값으로 구성되어 있는 저장소이다. 다만 다양한 방법으로 구성할 수 있다.
(미래의 어느 시점에 데이터를 삭제해야 하는데 쿠키는 엔트리 중 하나에 옵션으로 설정가능하지만 로컬 저장소는 js와 통신하는 과정을 거쳐야 한다.) JS 통신으로 접근이 가능하다.
로컬 스토리지보다 사용하기에 투박하다. 좋은 API를 갖고 있지 않다.
1의 저장소들과 다르게 쿠키는 서버에서 읽을 수 있다. 요청하는 헤더 안에 발신 HttpRequest가 추가되어 있다.
=> 1의 저장소들과 마찬가지로 키-값 저장하는 저장소이기에 복잡한 데이터 저장에는 적합하지 않다.

3. IndexDB
Client DataBase이다. 브라우저에 빌트인되어 쿼리 언어를 사용할 수 있다. 레코드와 테이블이 존재하여 복잡한 데이터를 다루는데 적합하다. JS로 접근이나 삭제가 가능하다. 
=> 복잡한 데이터를 다루는데 좋지만 API의 다양성이 떨어진다.


2. 로컬 Storage And 세션 Storage





























