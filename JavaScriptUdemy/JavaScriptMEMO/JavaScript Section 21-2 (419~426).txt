1. 웹팩으로 번들링하기
module로 나눠서 스크립트를 작성하여 배포한다면 많은 HTTP 요청으로 인해 성능의 저하가 올 수 있다.
=> webpack를 이용하면 분산된 module를 하나로 합친 코드로 만들어서 배포하여 효율성이 증가한다.

웹팩 => html의 다수의 스크립트 파일들을 하나의 파일로 만들어주는 기능을 한다.

webpack은 Node.js의 npm을 통해 설치된다.

webpack 설치방법
npm install --save-dev webpack webpack-cil
(webpack-cil를 이용하면 API로 webpack과 상호 적용할 수 있다.)

webpack 설정
webpack의 설정파일은 수동으로 만들어야 한다. root 위치에 webpack.config.js를 만든다.
webpack.config.js는 Node.js에 의해 실행되거나 사용한다.

** Node.js에서 내보내는 방식
exports 키워드 대신 exports = {}; 사용한다. 이 객체를 파일 밖으로 내보내는 구문이다.
module.exports = {}; => 설치한 webpack이 이를 보고 webpack를 구성한다.


webpack.config.js의 객체

1.Entry
엔트리 포인트는 웹팩이 번들링을 시작할 메인 파일이다. webpack은 엔트리 포인트의 import를 확인하여 관련된 의존성을 분석하고 파악한다.

2. output
번들파일 자체 설정 filname, path

__dirname => 현재 경로에 대한 엑세스를 준다.
__dirname, 'assets', 'scripts' => 현재 위치의 assets의 폴더의 script 폴더에 대한 접근할 수 있다.


package.json에 scripts 키에 "build" : "webpack"를 주면 내부에서 webpack-cil 사용한다.
=> webpack-cil를 사용한다는 것은 명령어를 통해 webpack를 제외할 수 있다는 뜻이다.
=> npm run build를 통해 webpack를 실행시킬 수 있다.

webpack은 import의 확장자를 추가할 수 없다. => .js를 빼야 한다.

































