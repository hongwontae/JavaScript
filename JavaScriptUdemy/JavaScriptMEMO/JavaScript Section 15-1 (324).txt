1. PureFunction and sideEffect
순수 함수
=> 입력값이 있고 인자가 주어지면 늘 같은 값을 반환한다.
=> 아무런 부수 효과도 트리거 하지 않는다. 함수 외부에선 아무것도 바꾸지 않는다.

부수 효과
=> 함수의 외부를 바꿔놓는 것을 일컫는 용어이다. (HTTP 요청, DB데이터)
=> 함수의 밖에서 정의된 변수를 바꾸는 행위나 함수에 들어가는 객체나 배열을 바꾸는 행위 등...
=> 함수의 매개변수에 객체가 주어지면 배열의 복사본이 아니라 배열의 주소 복사본이 들어간다.

ex) let a = [1,2,3,4];
    function arrControl(a){
    a.push(5);
    console.log(a)
    }
    arrControl(a); => a [1,2,3,4,5]
=> 부수효과를 받은 비 순수 함수이다.


2. pure Function and none-pure Function
JS에서 sideEffect가 없는 순수 함수를 지향하는 것은 좋은 생각이다. => 이면에서 특수한 상황을 제외하여 이해하기 쉽다.

HTTP 통신이나 Data의 변경을 위한 함수를 사용하지 말라는 것이 아니다.

=> 최종적으로 지향해야하는 일은 최대한 순수함수를 만들고 사용하는 것이다.


3. 팩토리 Function
팩토리 함수는 또 다른 함수를 제공하는 함수이다.

함수내의 함수가 존재할 떄 반복작업을 회피하고 효율성있는 작업을 할 수 있게 해주는 함수 로직이다.
함수 내의 함수는 내부 함수의 외부에 있는 모든 것에 접근할 수 있다. => 상위 함수의 매개변수 tax에 접근할 수 있다.

function cal(a){
    function add(b){
        return a+b
    }
    return add;
}

const cal3 = cal(5);
const cal4 = cal(10);
console.log(cal3(15)); // 20
console.log(cal4(20)); // 30

=> 함수내의 매개변수를 지정해놓고 사용한다라고 이해하면 좋다.


4. closure;











































