1. Basic Function (basics-06-basic-function)
Define Function => 함수를 메모리 상에 저장해둔다. 아직 실행되지는 않는다.
Call funcktion => 함수를 호출한다. 이 행동이 함수를 실행시키는 것이다.

함수는 필요에 따라 매개변수를 받는다./ 매개변수는 함수을 동적으로 작동시키는 것이라 보면 된다.
함수에 매개변수를 주면 변수의 이름이 아니라 변수의 값이 전달되는 것이다.

함수의 선언은 function 함수이름 () {}
함수의 호출은 함수이름();

-- 자바스크립트의 문자열은 한 줄에서만 인식된다.


2. Return(basics-07-function-with-return)
함수가 호출되었을 때의 결과값을 건너주는 키워드

ex) function add (num1, num2) {
 const result = num1+num2
 return result
}

currentResult = add(1,3);

return이 없다면 값이 전달되지 않는다.


3. Code 순서 (basics-07-function-with-return app1.js)
변수나 상수를 사용하기 전에 먼저 선언을 해야한다. Js는 위에서부터 아래로 내려가면서 코드를 확인하는데 선언된 변수가 없는데 변수에 값을 할당하려고 하면 오류가 발생한다.

JS의 작동방식은 
위에서부터 아래로 코드를 읽는다. => 읽은 함수를 등록한다. => 페이지 내에서 함수가 호출되면 그떄 실행된다.
그렇기 때문에 함수의 위치는 자유롭다.


4. 전역, 로컬 범위 (basics-07-function-with-return app1.js)
함수는 외부에 정의된 변수 및 상수에 엑세스할 수 있어서 전역적으로 정의된 변수나 상수를 읽을 수 있다.

로컬(Block) Scope => 함수 내부에 상수나 변수를 정의를 했을 떄의 범위 
Local Scope는 정의된 위치에서 벗어날 수 없다. {} 중괄호 내에서 벗어날 수 없다는 이야기이다.

그러나 함수는 주변의 모든 범위에서 값을 가져와서 사용할 수 있다. 모든 변수에 엑세스가 가능하다.















