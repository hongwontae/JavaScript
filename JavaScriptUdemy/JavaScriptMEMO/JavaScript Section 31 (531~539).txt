1. 테스팅이란 무엇이며, 왜 중요한가?
테스트를 수동으로 작성하지 않고 자동적 처리하는 테스트 코드를 작성해야 한다.

why Test
1. 에러를 찾는다
2. 시간을 절약한다.
3. 버그나 에러의 가능성을 살펴본다.
4. 배포 전의 테스트를 통해 안정성을 얻는다.
5. 모듈 방식으로 코드를 작성해야 한다. => 테스트를 쉽게 하기 위해서
6. 코드를 개선한다.

테스트의 종류
1. Unit Tests => 애플리케이션의 분리된 단위로 하나를 테스트 한다. => 한 개의 코드 조각을 테스트한다.
2. Integration Tests => 테스트 코드가 여러 코드에 적합하게 테스트를 한다.
3. E2E Test, Interface Test => 전체 애플리이션, 일부 애플리케이션를 테스트하는 코드를 의미한다.
=> 유닛 테스트를 많이 사용한다. 모든 것을 테스트하기에는 복잡하기 떄문이다.


2. 테스팅 설정

2-1. Test Runner
=> 테스트를 실행하고 결과를 요약해준다.

2-2. Assertion Library
=> 로직과 예상결과를 정의하는 것을 도와준다.
=> 테스트로 확인하고 싶은 비교 및 조건 등을 정의한다.

* 2-1, 2-2작업할 떄  Jest를 많이 사용한다.
=> 테스트 작성에 유용한 라이브러리이다.

2-3. Headless Browser
=> E2E 테스트를 할 떄 필요하다.
=> Puppeteer를 많이 사용한다.

=> Jest 페이지에서 관련된 정보를 찾을 수 있다.

Jest 설치
npm install --save-dev jest


3. 유닛 테스트 작성 & 실행하기
테스트 파일 생성 방법 => 파일이름.test(spec).js

valina JS는 Jest 테스트의 대상이 될 수 없다.
=> 코드를 테스트하려면 가져와야 하는데 이 떄 import 문은 jest 파일에서 인식하지 못한다.
=> require()를 통해 가져와야 한다.
=> node.js 기반의 JS 지원한다.

ex) const {generateText} = require('./util');


test(1,callBack)
=> 전역함수이며 단일 테스트를 정의한다.
=> 첫 번쨰 인자로는 테스트 이름을 정의한다.
=> 두 번쨰 인자로는 테스트를 실행할 함수를 정의한다.

ex) test('should output name and age', ()=>{
  const text = generate('Max',29);
  expert(text).toBe('Max (29 years old)')
})
=> expert는 기대하는 값과 실제 테스트 값을 비교할 때 사용하는 함수이다.
=> expert(테스트 값).toBe(기대하는 값);

테스트를 실행하고 싶다면 package.json의 scripts 키에 값으로 "test" : "jest"를 주고 npm test를 하면 된다.
결과가 옳다면 pass가 뜨고 옳지 않다면 틀린 이유와 fail이 뜬다.


4. 통합 테스트 작성 & 실행하기
exports가 된 객체들은 같은 파일에 있을지라도 공유가 되지 않기에 
=> exports.generateText = generateText;
exports.validateInput = validateInput;
const로 작성하기 exports식으로 넘겨줘야 한다.

통합 테스트는 하나의 함수문이나 하나의 구문에 국한되지 않고 함수안에 함수가 있다든가 여러 module에 관여하고 있는 코드들을 테스트하는 것이다.

똑같은 방식으로 test(expect.toBe)를 사용하면 된다.


5. E2E 테스트 작성 & 실행하기
puppeteer 라이브러리를 설치한다. => E2E 테스트를 돕는 라이브러리
=> npm i puppeteer

브라우저에서 실행되어야 하는 단계를 정의해서 웹 페이지에서 특정 작업을 자동화한다.
=> 테스트를 위해서

ex) test('should click around', ()=>{
    const browser = puppeteer.launch({ => puppeteer를 설정한다.
        headless : false,
        slowMo : 80, => 속도
        args : ['--window-size=1920,1080'] => 브라우저 화면 사이즈
    })
})

=> 이 함수는 프로미스를 반환한다.
=> 최신 puppeteer 라이브러리 사용법을 배워야 한다.





















































