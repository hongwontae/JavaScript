1. Async/ await
프로미스 구문을 조금 더 동기적으로, 일반 JS코드처럼 보이게 하는 구문 => Async/ await

Async/ await는 함수에서만 사용할 수 있다. 
함수 선언문은 키워드 앞에 Async/ await를 추가하여 활성화시킨다.
함수 표현식은 = 등호 바로 앞에 Async/ await를 추가하여 활성화시킨다.

Async가 앞에 있으면 이 함수는 자동으로 프로미스를 반환한다. 이 함수는 return를 호출하지 않는다.
함수 자체는 Promise를 반환한다.

async는 함수 본문을 Promise로 변환하고 이를 반환한다.

async를 사용하면 await 키워드를 사용할 수 있다.
await 프로미스를 반환하는 함수 본문 함수 앞에서 사용된다.

async와 await를 사용하면 코드 내부를 then()을 사용한 것처럼 바꾼다.


2. Promise Review
프로미스 객체를 반환한다는 것은 프로미스 로직을 갖춘 객체를 반환한다는 것이다.
프로미스는 비동기 처리 함수를 가시성있게 더욱 효율적이게 변환한다.

프로미스의 결과는 then, catch로 처리한다.
then()과 catch()는 조건에 따라 바로 실행되는 것이다.
then을 사용하는 이유는 비동기 처리에 동기처리 로직을 더하는 것이다. (차례로 실행되기 떄문이다.)

getPosition.then().then()catch()
=> getPosition으로 반환된 return값은 자동으로 then의 매개변수로 받을 수 있다.



3. async/await Review
async 함수를 호출한 결과에 해당하는 반환 값은 반드시 Promise 객체이다.
만약 async 함수가 객체가 아닌 값을 반환하면 그 값으로 이행되는 Promise 객체를 생성하여 대체한다.

function koo(){
 return Promise.resolve(1);
}

async function foo(){
  return 1
}
=> 두 개는 같은 의미이다.


await는 async 함수에서만 사용할 수 있다.
await 키워드 뒤에 오는 값은 반드시 Promise 객체이다.
만약 Promise 객체가 아닌 값이 await 키워드의 뒤에 온다면 그 값으로 이행되는 Promise 객체를 생성하여 대체한다.
** await 키워드를 사용하면 await 키워드의 뒤에 오는 Promise 객체가 이행되거나 거부될 때까지 기다린다(코드의 실행이 중단된다).
해당 Promise 객체가 이행된다면 그 이행 결괏값이 await 키워드 부분을 대체함과 동시에 코드의 실행이 재개된다.
하지만 해당 Promise 객체가 거부된다면 예외가 발생하게 된다. => 다음 코드로 이동하지 않는다.


4. Async/ await & 오류 처리하기
async/await는 catch 메서드가 존재하지 않는다. 
await는 이전 줄이 해결되는 한 항상 다음 줄으로 이동한다.

try-catch를 사용하여 오류를 처리한다.
try가 실패하면 catch 블록으로 가는 로직이다.


































