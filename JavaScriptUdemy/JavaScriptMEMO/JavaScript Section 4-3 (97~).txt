1. Switch Case (control-12-switch-case)
switch case 구문은 간단히 말해서 case별로 다른 코드를 실행해야 할 때 사용한다. (if else와 비슷하다.)

fall through가 기본 동작이다. 하나의 case가 실행된 후 다른 case도 실행한다는 의미이다. 이를 방지하기 위해서 하나의 case 구문 제일 밑에 break;를 작성하면 된다. 이렇게 작성하면 하나의 case문이 일치하면 다른 case문은 무시하라는 뜻이 된다.

default 키워드는 일치하는 case가 하나도 없을 때 default 안의 코드를 실행하라는 키워드이다.

ex) switch (ev) {
    case LOG_EVENT_PLAYER_ATTACK:
      logEntry.target = 'MONSTER';
      break;
    case LOG_EVENT_PLAYER_STRONG_ATTACK:
      logEntry = {
        event: ev,
        value: val,
        target: 'MONSTER',
        finalMonsterHealth: monsterHealth,
        finalPlayerHealth: playerHealth
      };
=> switch(가져온 매개변수)
   case 사용자가 비교할 값 : 일치하면 실행할 코드 (:다음에 실행할 코드를 적어야 된다.)
     break; 일치하면 실행하고 끝내라
     default : 실행할 코드 



2. 반복문
For/ For-Of-Loop/ For-In-Loop/ While Loop

for-Of => 배열을 반복한다.
ex) for(const el of array){console.log(el)}

for-in => 객체의 모든 키를 출력한다.
ex) for(const key in obj){console.log(key); consoel.log(obj[key]);}

while-loop => 조건이 충족되는 경우 출력하고 그렇지 않으면 멈춘다.


3. For
for(let i=1; i<3; i++){반복할 코드}/ 배열.length => 배열의 개수
마지막의 조건인 i++의 경우 {반복할 코드}가 끝난뒤 설정된다.


4. For-Of
for(const i=0; 설정할 이름; 실제 배열){console.log(설정할 이름)} => 모든 배열의 항목들이 인덱스의 순서에 맞춰 출력된다. of의 초기값이 const인 이유는 배열의 모든 출력값은 반복할 떄마다 다시 생성된다. let은 재할당으로 바꿔주는 것이고 const는 재할당이 안된다. 재할당이 아닌 다시 생성이기에 const를 사용


5. For-In
for(const key in logEntry){console.log(key+' => '+ logEntry[key])}
=> 객체의 키와 값을 불러오는 로직이다. for-in은 모든 키에 순차적으로 접근하여 출력한다.


6. 중첩반복문
먼저 외부의 반복문이 실행되고 매번 외부 반복문이 반복될 때마다 내부 반복문 전체가 실행되며 이 작업이 완료된 후에만 외부 반복문의 다음 반복이 시작된다.

































     