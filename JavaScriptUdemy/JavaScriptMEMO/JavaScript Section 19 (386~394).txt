1. Third-Party-Library why use?
라이브러리라는 개념은 프로그래밍 언어를 막론한다. 어떤 언어든 라이브러리를 사용한다.
모든 로직을 개발자가 일일이 구현하는 것보다는 미리 구현되어 있는 로직을 가져다가 사용하는 것을 의미한다.

2. 라이브러리 추가하기
항상 라이브러리를 <script> 처리할 때는 기존 js 파일이 실행되기 전에 위치시켜야 한다.

Script 다운 => 로직을 가진 JS파일을 다운로드하여 HTML의 Import한다.
조금 더 명시적이다. 다운로드 떄문에 무거워지고 업데이트도 수동으로 해야 한다는 단점이 존재한다.

CDN => 외부 URL를 통해서 외부 서버로부터 라이브러리를 가져온다. src = "" 링크를 넣는다.
CDM는 서버와의 통신이기에 빠르고 다운로드하거나 관리해야 한다는 부담이 없기에 많이 사용된다.

=> Lodash 라이브러리를 사용했다.


3. 예시 : jQuery
React, vue.js, Anglura 등은 모두 라이브러리이다.

과거에는 DOM 동작 제어를 바닐라 JS로 하기 힘들었기 떄문에 jQuery를 사용해서 DOM를 조작했다.
=> 현재에 이르러서는 거의 필요없다.


4. 라이브러리 찾기 
일반적으로 JS 라이브러리들을 모아놓은 사이트는 없다. 해당 로직에 대한 라이브러리를 찾고 싶다면 검색하면 된다


5. Axios 라이브러리 & HTTP 요청
클라이언트와 서버의 통신을 더욱 원활한 코드 작성을 도와주는 라이브러리 => Axios
CDN를 사용하면 Axios는 전역 객체가 된다.

axios는 항상 프로미스를 반환한다.
axios.get/ axios.post/ axios.put/ axios.delete () => URL 하나만 인자로 받고 Promise를 반환한다.
이렇게 반환된 PromiseResult인 Response는 기존의 fetch API와 비슷하지만 axios의 response 객체는 바로 데이터가 튀어나온다.

axios는 별다른 오류처리를 하지 않아도 오류가 발생한다. => axios의 효과
또한 axios는 fetch API의 오류처리의 빈틈 (URL이 틀린경우, 400, 500 에러)도 자동으로 오류처리한다.
(네트워크 오류, URL 오류.. 등등)
=> 이러한 것을 다 잡아주기 떄문에 catch를 통해 예외처리 하기에 쉽다.

Axios에는 따로 헤더를 추가할 필요가 없다.
post 전송일 떄 XMLHttpRequest나 fetch()는 headers를 Content-Type : application/json이라고 작성했다.
또한 보낼 데이터를 JSON.Stringify()를 통해서 JSON으로 만들었다.
Axios는 이 두 작업을 자동으로 처리한다.

Form-Data를 작성해도 자동으로 처리해준다.
Axios가 데이터를 분석하여 알맞게 headers를 처리하고 올바른 데이터 변환도 한다.

delete => URL만 넣으면 자동으로 처리된다.












































