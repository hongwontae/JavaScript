1. Getter/Setter


1-1. getter
=> get 게터이름() {
  
  return ;
}

1-2. setter
=> set 세터이름(){

}

toFixed() => 인자로 받은 숫자까지 부동 소수점으로 인식하게 한 문자열로 치환한다.
getter와 setter도 this로 불러야 한다.

getter 메서드는 값을 사용하려고 시도하면 getter를 호출하고 setter 메서드는 값을 할당하려고 시도할 때 setter를 호출한다.
=> 일반 객체의 getter와 setter와 다른점은 클래스는 클래스 내부의 프로퍼피에 접근할 떄 발동한다. New를 통해 객체를 만들거나 클래스 메서드를 사용할 떄(메서드가 클래스의 프로퍼티에 접근하는 것일 떄)


2. 상속
상위 클래스가 가지고 있는 프로퍼티나 메서드를 하위 클래스에 넘겨주는 행위를 말한다.
하위 클래스에 extends 상위클래스를 적으면 적용된다.


3. 상속 구현하기
setAttribute()/getAttribute() => html 속성을 추가/수정하거나 가져오는 메서드이다.
class 하위 클래스 이름 extends 상위 클래스 이름 => 상속을 구현하는 방법
a클래스가 b클래스를 상속받았다. c클래스에  b클래스 객체를 생성하면 c에서 a,b둘 다 사용이 가능하다.
java와 비슷하게 하나만 상속받을 수 있다.
상속받은 하위 클래스에 this를 사용하면 상위 클래스 객체의 프로퍼티와 메서드에 접근할 수 있다.

확장을 받은 클래스의 경우에는 생성자가 없으면 부모 클래스의 생성자가 자동으로 호출된다. => 하위 클래스의 객체가 생성될 떄..
하위 클래스는 부모 클래스의 생성자가 자동으로 호출된다. 기본 생성자가 호출되는 것이다.
부모 클래스의 생성자를 인위적으로 호출하고 싶으면 super()키워드를 사용해야 한다.
(상위 클래스의 생성자의 매개변수가 존재할 떄 무조건 사용해야 한다. 가독성을 위해 super()를 그냥 호출하자.)


부모 클래스에서 인위적으로 객체를 만들기 위한 생성자는 받지 않는다.


4. 메서드 덮어쓰기와 super() 생성자
오버라이딩 => 하위 클래스에서 부모 클래스에서 정의한 메서드를 덮어쓰는 행위

생성자 안에서는 생성 중인 객체를 참조하는데 그것이 new 키워드이 역할이다.
=> 생성자가 생성중인 객체를 참조하기 떄문에 부모 클래스의 생성자의 this.render()는 하위 클래스의 render() 메서드를 실행한다.


5. super() 생성자의 실행, 순서, this
필드는 생성자가 호출될 떄 자동으로 프로퍼티로 만들어진다. => super() 부모 생성자가 호출되고 나서 실행된다.
부모 클래스의 생성자가 실행을 마친 후에 하위 클래스 생성자을 사용할 수 있다.

order => Parents Constructor => sub Constructor


6. () => {} this
화살표 내부의 this는 화살표 함수 외부의 this인 것으로 인식하자.


7. private 프로퍼티
public => 클래스와 객체 외부에서 이들에게 접근할 수 있다.
private => 클래스 안에서만, 클래스 기반으로 생성된 객체 내에서만 사용된다.
ex) productList에서 product라는 필드가 존재한다. private product는 productList에서만 사용할 수 있다. => 이것이 private 프로퍼티라는 것이다. 자바와는 다르게 앞에 #을 붙이면 된다. 클래스 내부에서 private에 접근할 때도 #를 붙여서 접근한다.


Constuctor super() this.render가 실행되면 생성중인 객체를 참조하기 때문에 하위 클래스의 render가 실행되지만 주체는 부모 클래스의 생성자임으로 하위 클래스의 render()안에서 private 프로퍼티에 접근하지 못하는 것이다.


8. Instances 연산자
어떤 객체가 어떤 클래스나 블루프린트에 근거해서 만들어졌는지 확인해주는 연산자이다.
Class Person{name : 'Max'}
const p = new Person();
p instanceof Person => true => p라는 값이 person을 통해 만들어졌는가?


9. 객체 설명자 이해하기
Object.getOwnPropertyDescriptiors(obj) => 인자에 해당하는 새로운 객체가 반환되는 이를 프로퍼티 설명자라고 한다.JS가 이면에서 저장하는 메타데이터로 프로퍼티가 어떻게 사용될 수 있는지에 영향을 준다.

writable => true이면 새로운 값을 할당할 수 있다.
configurable => 삭제할 수 있다.
emumerable => for-in 루프을 사용할 수 잇다.

Object.defineProperty(a,b,{}) => 인자 a는 객체, b는 키를 가져와서 그 값에 해당하는 설명자를 {}로 만든다.
{} => 여기에 내가 설정하고 싶은 값을 설정하면 된다.
































