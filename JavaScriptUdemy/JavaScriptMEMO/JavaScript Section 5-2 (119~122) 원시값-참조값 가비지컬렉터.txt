1. 원시값 vs 참조값
자료형은 두 가지로 나뉠 수 있다. 원시값과 참조값이다.

원시값은 대체로 Stack공간에 저장된다./ .을 사용하면 속성에 접근한다는 뜻이다. 
만약 원시값에 .를 사용하면 일시적으로 객체로 변하여 const name = 'hwt' name.length =>3를 사용할 수 있다는 뜻이다.
원시값의 경우에는 실제 값을 stack에 저장한다.
원시값 => string, number, boolean, undefined, symbol, null

참조값은 대체로 Heap공간에 저장된다. 참조값은 Heap 공간에 그 객체의 주소값을 저장한다. 
값은 브라우저의 메모리 어딘가에 저장된다. 메모리(참조변수의 값)/ Heap(주소값) => Heap이 실제이다.
참조값에 할당 연산자를 사용한다는 것은 주소값을 바꾸겠다는 의미이다.
참조값 => 객체, 배열, 함수


2. 가비지 컬렉션 & 메모리 관리
os는 chrome에게 일정한 메모리 공간을 주고 할당량을 넘어서면 다운시킨다. 그러나 chrome이 내부 메모리 관리를 하기 때문에 잘 일어나지 않는다.

가비지 컬렉터가 하는 일
1. 각종 브라우저들은 가비지 겔렉션이라는 엔진을 가지고 있다. 가비지 컬렉터는 사용되지 않은 객체에 대한 힙 메모리를 주기적으로 확인한다. 이후 사용되지 않은 객체를 메모리에서 제거한다. 객체는 힙 메모리에 존재한다.

2. 함수의 실행이 반복적이라면 지속적으로 함수에 메모리값을 할당해서 사용하는 것이 아니라 함수를 재사용한다.
하지만 함수가 익명함수라면 가비지 컬렉터를 속일 수 도 있다. 익명함수는 실행할 때마다 새로운 주소값을 내포함으로 재사용이 불가능하기 때문이다.













