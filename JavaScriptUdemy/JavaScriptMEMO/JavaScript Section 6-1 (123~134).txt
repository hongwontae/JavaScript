1. Review
스크립트 전체를 읽고 함수를 등록하고 함수가 호출될 때마다 실행된다.

2. 매개변수와 인자 (functions-01-starting-code)
매개변수는 함수를 정의할 떄 괄호안에 지정하는 변수이다.
인자는 함수를 호출할 떄 함수에 전달하는 구체적인 값이다.

3. 함수 vs 메서드
객체에 함수가 저장된 것을 메서드라고 부른다.

ex) const person = {welcome : function greet(){console.log('Hello There')}}
    person.welcome(); => 메서드/ 변수명.키();


4. 함수 = 객체
함수 그 자체로도 하나의 객체가 된다.


5. 함수 표현식(변수에 함수 저장하기) (functions-02-function-expressions)
함수를 변수에 저장할 수 있다. 함수를 사용하려면 변수에 접근해야 한다.
함수를 변수에 저장하면 해당 함수를 익명함수로 만들 수 있다. (굳이 함수의 이름이 필요없으니까)


6. 함수 선언 vs 함수 표현식
함수 선언은 JS가 자동으로 함수를 맨 위로 호이스팅하고 완전히 초기화한다. 함수가 어디에 있는지 구애받지 않고 파일의 맨위에 정의된 것처럼 행동한다. (함수를 선언하기도 전에 호출하는 것이 가능해진다.)

함수 표현식은 호이스팅이 되지만 상수에 종속되어 있음으로 정의되기 전까지는 사용이 불가능하다.
=> 함수를 사용하려면 함수 표현식이 선언되어 있어야 한다.


7. 익명 함수
함수는 변수에 값/ 객체의 값/  매개변수의 값으로 활용될 수 있다. 이 경우에 함수를 익명함수로 사용할 수 있다.
그러나 익명함수로 지정하면 콘솔의 오류의 내용이 익명함수라고만 출력되어 오류의 발생지가 찾기 어려워진다.


8. 화살표 함수
익명함수를 더욱 간편하게 사용하는 로직이다. 변수의 값이나 매개변수나 객체의 키에 대한 값에서 사용될 수 있다.
() => {} : 일반적인 화살표 함수
매개변수 => {} : 매개변수가 하나일 때 ()가로를 생략하고 사용가능
(a+b) => a+b : 함수의 표현식이 하나일 때 중괄호를 생략가능






















