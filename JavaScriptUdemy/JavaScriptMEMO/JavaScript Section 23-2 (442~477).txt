1. 솔루션 : 코드 트랜스파일링
JS 최신 문법 (let, const, arrowFunc..)를 지원하지 않는 브라우저의 어플리케이션을 만들 떄 JS 최신 문법을 사용해서 만들고 배포하고 싶다면 트랜스파일링을 이용해야 한다.

트랜스파일링 => 최신코드를 구형 코드로 변환하는 것을 의미한다. 이 떄 Babel이라는 도구를 사용한다.

babel 이용법
npm install --save-dev babel-loader @babel/core @babel/preset-env (--save-dev === -D)
babel-loader => 웹팩에 통합되어 Webpack과 Babel의 도구를 연결하는 역할을 한다.
@babel/core => 최신 코드를 구형 코드로 옮기는 방법을 알고 있는 도구이다.
@babel/preset-env => 어떤 기능이 컴파일링 되는지를 제어하는 사전 설정이다.

webpack.config.js/ webpack.config.prod.js에 밑의 코드를 추가한다. 웹팩에게 트랜스파일링할 파일 설정을 알려주는 것이다.
module: {
  rules: [
    {
      test: /\.(?:js|mjs|cjs)$/,
      exclude: /node_modules/,
      use: {
        loader: 'babel-loader',
        options: {
          presets: [
            ['@babel/preset-env', { targets: "defaults" }]
          ]
        }
      }
    }
  ]
}


이 후 package.json에서 "browserslist": "..."를 작성하면 Babel이 pack.json의 broweserslist 값을 보고 어떤 브라우저를 기준으로 트랜스파일링 할지 결정한다. 값에 들어가는 값은 공식문서에 문법을 살펴보면 된다.

이 후 npm run build를 사용하면 트랜스파일링이 웹팩화되어 반환된다.



































