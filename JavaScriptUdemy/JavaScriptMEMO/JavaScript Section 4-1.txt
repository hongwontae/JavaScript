1. if문과 Boolean (control-01-starting-project)
== : 이중 등호 연산자/ 두 값을 비교해서 같다면 true 다르다면 false를 반환한다.
!= : 두 값을 비교해서 같다면 false 다르다면 true를 반환한다.
단순히 값을 비교하는 것이지 값+자료형을 비교하는 것이 아니다.

ex) 2==2 true/ 2=="2" true

===/!== : 삼중 등호 연산자/  값과 자료형이 일치하는지 확인한다. !==은 일치하지 않는 것을 확인한다.
ex) 2===2 true/ 2==="2" false

! => 부정연산자 
조건을 부정한다.

ex) !true => false/ !false =>true

if(조건문){
  true일 떄 사용할 코드
} => (),{}는 무조건 필요하다.


2. if문 사용하기 (control-02-added-if)


3. 등식으로 객체와 배열 비교
객체와 배열은 같은 값을 가진다 하더라도 이중이나 삼중 연산자로 비교했을 때 false가 나온다.
객체와 배열은 자신들이 가진 주소값을 비교하기 때문이다.


4. &&와 || (And, Or)
조건문을 하나 이상을 원할 떄 And나 Or 연산자를 사용하면 된다.
&&는 결합된 조건문이 모든 true여야 ture를 반환하고 ||은 결합된 조건문이 하나라도 ture이면 true를 반환한다.

ex) if(5===5 || 4===3) true/ if(5===5 && 4===4) true
ex) if('htw'==='hwt12' || 1===2) false/ if(5===5 && 4===1) false


5. 연산자 순서
And가 or보다 높은 우선순위를 갖는다.

ex) 5!=5 && 3>6 || 10>5의 우선순위와 결과는?
flase && false || true => and가 우선하기 때문에 false && false가 묶인다. 하나의 false값 등장 
이후 || false와 true가 비교되어 true가 값이된다. 즉, and가 우선순위가 높기에 먼저 묶이고 or 연산이 된다.


6. Falsy와 Truthy
JS가 이면에서 조건문을 평가하는 방식이다. if문은 Boolean으로 작동하지만 JS는 if 조건문이 무엇이 들어와도 Boolean으로 변환하려고 한다. 연산자 비교없이 if문에 하나의 값이나 변수를 넣는 경우 밑에 설명에 따라 처리한다.
=> 이를 falsy와 truthy vlaues값이라고 한다.

조건문에서 0은 false 0이 아닌 숫자는 true로 평가한다.
조건문에서 "" 빈문자열은 false 하나라도 존재하는 문자열이면 true로 평가한다.
모든 객체나 배열은 비워져 있어도 true로 평가한다.
null, undefined, NaN은 항상 false로 평가한다.


ex) const username = 'user1'
   if(username) {
  ...
} => username은 Truthy값으로 평가되어 중괄호문이 실행된다. 빈 문자열은 false, 하나라도 있는 문자열은 true


7. if문 활용하기1 (공격함수 추가하기) (control-03-monster-killer-starting-project)


8. if문 활용하기2 (승리조건 확인하기) (control-05-attack-if-else-if)


9. if문 활용하기3 (강한공격 기능 추가하기) (control-06-strong-attack)
Refactoring




























