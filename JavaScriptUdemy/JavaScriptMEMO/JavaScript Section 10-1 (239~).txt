1. OOP 코드로 시작하기
oop-01-starting-setup => 참고
=> 클래스를 사용하는 이유는 재사용성 때문이다.
=> 자신이 원하는 객체를 쉽게 만들기 위해서 class를 생성하고 new 연산자를 통해 객체를 생성한다.

for(const prod of this.products)
....
productList.render();
=> productList의 객체 products를 참조한다.

const productList = {
    products :[
    {
        title : 'A soocer player',
        imageURL : 'https://cdn.pixabay.com/photo/2023/05/25/07/31/woman-8016553_1280.jpg',
        price : 2000,
        des : 'A cool girl'
    },
    {
        title : 'S soccer player',
        imageURL : 'https://cdn.pixabay.com/photo/2023/08/28/23/17/superb-fairywren-8220199_1280.jpg',
        price : 2000,
        des : 'He is good player'
    }
]

=> 그니까 productList의 products : => [] 여기부터 값을 가진다. 그러므로 for-of 반복문을 사용할 수 있다.


2. 클래스 정의와 사용하기
클라스 기반으로 객체를 만든다 => 자바의 객체지향과 유사하다.
new는 클래스를 기반으로 한 함수의 실행과 함꼐 인식된다. => 새로운 객체를 생성한다.
객체를 위한 청사진이라고 생각하면 된다.
객체는 class의 인스턴스이다. 생성자 함수를 통해 만든 객체는 class로 만든 것이다. 이를 인스턴스라고 한다.
class를 만드는 방법 => class 클래스이름(첫 문자는 대문자로 하는것이 좋다.) {logic...}
필드 = 객체의 프로퍼티/ const prod = new Product() => prod{product 프로퍼티와 메서드};


ex) class Product {
  title;
  price;
  koala3121;
}

console.log(new Product())

{title : undefined, price : undefined, koala3121 : undefined} => new Product() => 객체를 생성한다.


3. 생성자 메서드로 작업하기
클래스에도 사용자 지정 메서드를 만들 수 있다. => someOne() {};
java 생성자 메서드와 비슷하다.

ex)   constructor (title, image, desc, price) {
    this.title = title;
    this.imageURL = image;
    this.description = desc;
    this.price = price;
  }

constructor라는 키워드 () {}
컨스트럭터는 new로 클래스의 새 인스턴스를 만들면 JavaScript가 자동으로 호출을 한다.
=> () 인자에는 new class이름() 할떄 매개변수로 받을 객체의 값이다.
=> {}의 로직은 this는 class의 필드를 의미한다. 
=> constructor의 this는 {title : 인자의 값..}를 의미한다. this.title은 생성자를 통해 만들어질 객체를 가르킨다.
=> 생성자로 객체를 만들 떄 생성자의 인자를 다 않넣어도 된다. 관대하게 실행한다.


4. 필드 vs 프로퍼티
class Product{

  //title = 'DEFAULT';
  //imageURL;
  //description;
  //price;

  constructor (title, image, desc, price) {
    this.title = title;
    this.imageURL = image;
    this.description = desc;
    this.price = price;
  }

  printInfo() {
  console.log('asd')
}

}

=> title = 'DEFAULT'를 부를 때 클라스의 필드라고 부른다.
=> this.title = title => 클라스의 프로퍼티이라고 부른다.
=> 클라스 기반으로 객체를 생성하면 필드가 속성이 된다.
=> printInfo(){} => 클래스의 메서드라고 부른다.
=> 생성자를 만들면 필드가 의미가 없어진다. 자바와는 다르게 생성자가 있으면 필드를 거치지 않고 자동으로 객체를 생성한다.


5. 다수의 클래스 사용하고 연결하기
클래스는 실행할 코드 전에 정의되어야 한다.
생성자나 메서드나 필드의 this는 생성자로 만들어낸 객체나 그외 클래스의 메서드나 프로포티를 참조한다.
이벤트 리스너의 this는 e.currentTarget과 같은 의미이다.
65~70의 주석 => this 작동원리 (oop-4)



6. Static vs Instance
정적 프로퍼티와 메서드 앞에는 static 키워드가 붙는다.
이들은 클래스 자체에 엑세스할 수 있기에 클래스를 인스턴스화할 필요가 없다. => 전역 class

인스턴스 프로퍼티와 메서드 앞에는 그냥 사용한다.
이들은 클래스 자체에 바로 접근은 불가하고 객체를 new를 사용해서 만들고 사용해야 한다.

oop-5 => this.cart = new ShoppingCart()
=> shop클래스 내부에 cart라는 프로퍼티를 저장한다.
=> 그렇면 shop이라는 객체를 생성한 클래스 내부에서 shoppingCart를 사용할 수 있게 되는 것이다.


7. 클래스 vs 객체 리터럴
객체 리터럴을 사용할 때 => 빠르고 간편하게 사용하기 할 떄
클래스 객체를 사용할 떄 => 재사용 논리나 동일한 구조 논리를 가진 객체를 생성할 떄 => 객체의 복제가 쉬워진다.

클래스 내부에서 인스턴스 프로퍼티나 메서드에 접근할 때는 this를 사용하고 const,let 객체는 그냥 사용한다.

8. Getter/Setter

8-1. getter
=> get 게터이름() {
  
}

8-2. setter
=> set 세터이름(){

}

toFixed() => 인자로 받은 숫자까지 부동 소수점으로 인식하게 한 문자열로 치환한다.
getter와 setter도 this로 불러야 한다.


9. 상속
상위 클래스가 가지고 있는 프로퍼티나 메서드를 하위 클래스에 넘겨주는 행위를 말한다.
하위 클래스에 extends 상위클래스를 적으면 적용된다.


10. 상속 구현하기
setAttribute()/getAttribute() => html 속성을 추가/수정하거나 가져오는 메서드이다.
class 하위 클래스 이름 extends 상위 클래스 이름 => 상속을 구현하는 방법
java와 비슷하게 하나만 상속받을 수 있다.
상속받은 하위 클래스에 this를 사용하면 상위 클래스 객체의 프로퍼티와 메서드에 접근할 수 있다.

하위 클래스는 부모 클래스의 생성자가 자동으로 호출된다. 기본 생성자가 호출되는 것이다.
부모 클래스에서 인위적으로 객체를 만들기 위한 생성자는 받지 않는다.

































