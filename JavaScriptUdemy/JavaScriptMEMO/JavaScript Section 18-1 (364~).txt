1. HTTP의 배경의 자세한 내용
API(Application Promgramming Interface)

브라우저와 백엔드 서버가 바로 통신되는 것을 바라지 않는다.
=> 서버가 항상 새로운 HTML 페이지를 반환해야 한다는 뜻이다. 페이지가 새로 고침되고 리렌더링이 되어 사용자의 좋지 못한 경험을 준다.

브라우저의 직접적인 백엔드 통신은 구체적인 목표를 세워 보낼 수 없다. 이를 프론트엔드(JS)가 해준다.


2. HTTP의 배경의 자세한 내용 (HTTP 요청)
웹의 기반으로 웹 사용자가 어떤한 요청을 보내면 프론트 엔드가 유효성 검사을 하고 해당 데이터를 백엔드로 보낸다.
백엔드는 해당 데이터를 저장하고 해당 데이터의 요청에 걸맞는 데이터를 가져오기 위해 DB 서버를 탐색하고 알맞는 처리를 한 후 프론트엔드로 보낸다.

JS는 보안상의 이유로 DB와 직접적인 연결이 불가능하다.

Front-End와 Back-End의 통신은 HTTP 요청과 응답을 통해서 이루어진다.

서버에 요청을 보내기 위해서는 주소인 URL을 필요로 한다.
URL(도메인과 경로로 구성되어 있다.)

HTTP 요청에는 HTTP 메서드가 할당되어 있다. 
Get, Post, Patch, Put, Delete가 존재한다.

Get 요청은 일반적으로 데이터를 얻기 위해 사용한다.
Post 요청은 서버에서 데이터를 생성하기 위해 사용한다. (DB 데이터 생성)
Patch는 데이터를 업데이트한다.
Put은 데이터를 덮어쓴다.
Delete는 데이터를 삭제한다.

HTTP 메서드와 URL 조합을 결정하는 건 서버 측이다. 클라이언트 측은 이런 조합에 대해서 요청을 보낸다.

HTTP 요청의 또 다른 부분으로 HTTP Header와 HTTP Body가 존재한다. HTTP 요청에 연결할 수 있는 추가 메타데이터이다.

HTTP 헤더는 HTTP Body(본문)의 요청과 응답에 대한 간략한 정보를 가지고 있다. 헤더는 3가지 부분으로 나뉜다.
1. 일반 헤더 (General Header)
본문 컨텐츠와 관련없고 요청/응답이 생성된 날짜 및 시간등과 같은 HTTP 통신에 대한 일반적인 정보가 포함된다.
ex) Data : Tue, 17 Nov 2018 16:30:43,GMT

2. 요청/응답 헤더
서버에 요청하면 요청 헤더가 존재하고 서버가 클라이언트에 응답하면 응답 헤더가 존재한다.

요청 헤더는 요청한 url, 메서드(get,post..), 요청 생성에 사용된 브라우저 및 기타 정보가 포함된다.
ex) User-Agent: "Mozila/5.0 (...)/ 20191212 Chrome/ 98.0

응답 헤더는 사용자가 특정 페이지 또는 리소스에 대한 요청을 보낸 후 서버에서 브라우저에 의해 수신되며 컨텐츠에 사용된 인코딩, 서버 시스템에서 응답을 생성하는데 사용되는 서버 소프트웨어 및 기타 정보를 포함한다.

3. 엔티티 헤더
실제 메시지 또는 전송중인 HTTP 본문에 대한 정보가 포함된다. 컨텐츠 길이, 인코딩, 만료 날짜, 기타 중요한 정보..
ex) Contents-Length : 4959

HTTP 본문
=> 실제 데이터 컨텐츠/ 메시지 본문이 포함돼 있다. 컨텐츠에는 요청한 리소스에 따라 HTML 코드, 이미지, CSS 스타일 시트 또는 js 파일이 포함되어 있다.


3. HTTP 시작하기


4. Get 요청 보내기
HTTP 요청을 보내는 방법 => XMLHttpRequest 객체를 생성한다.
XMLHttpResut 객체는 브라우저에 내장되어 있다. 모든 브라우저가 이 객체를 지원한다. 이 객체를 통해 HTTP 요청을 보낼수 있다.

XMLHttpRequest.open();
=> 요청을 초기화한다. 인자는 두 개를 받는다. 하나는 어떤 요청을 할 것인지에 대해서 문자열 타입으로 넣는다. 
('GET', 'POST'...) 두 번쨰 인자는 통신할 URL를 적는다.
XMLHttpRequest.send();
=> 해당 요청을 보낸다.


5. Json 데이터 파헤치기










































































