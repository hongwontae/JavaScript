1. 분산 연산자(전개 연산자) (Spread Operator)
전개 연산자는 배열의 모든 요소를 꺼내 개별 요소의 리스트로 변환한다.
=> const b1 = [1,2,3,4,5]/ const b2 = ...b1 => 1,2,3,4,5
=> 요소의 리스로 반환된다.
=> 요소의 리스트란 ,로 구분된 값의 모음을 뜻한다.

전개 연산자 = ...
const a1 = [1,2,3,4,5]/ const a2= [...a1]
=> a2의 배열안에 a1의 값을 넣어준다. a2의 배열은 새로운 참조값을 가진 배열이다.

배열에 있는 객체를 복사할 떄 새로운 배열을 만들었지만 새로운 객체는 만들지 않았다면 객체를 편집할 경우 원본배열과 복사된 배열 둘 다 상호작용을 한다.

=> 즉, 객체가 있는 배열에 전개연산자를 사용하면 배열은 새로운 참조값을 갖지만 객체는 새로운 참조값을 갖지 않는다.

-- forEach나 map이나 filter에서 배열의 객체값을 다룰 떄 기존의 값을 복사하여 새로운 객체를 만들고 싶다면
   ex) const copiedPersons = persons.map(person => ({
  name: person.name,
  age: person.age
}));
=> person.name를 값에 줘야한다. 고급반복의 첫 번쨰 인자는 element 각 요소인데 그냥 이렇게 하는거 같다.


2. 배열 구조 분해 이해하기
const nameData = ['Max', 'Schwarz'];
// const firstName = nameData[0];
// const lastName = nameData[1];
=> 이러한 방식을 사용해도 좋지만 조금 빠른 방법이 존재한다.

const [name1,name2] = nameData;
console.log(name1,name2)
=> const/let/var 앞에 []를 작성하고 = 데이터를 꺼낼 배열
=> JS가 순서에 맞게 [] 변수명으로 배열값을 저장한다.

배열의 전부나 나머지를 모두 꺼내서 변수에 넣고 싶은 경우
const nameData = ['Max', 'Schwarz', 'Mr', 30];
const [ firstName, lastName, ...otherInformation ] = nameData;
... => Rest연산자라고 부른다. 배열에 남아있는 모든 요소를 수집하여 새로운 변수에 저장한다.
=> firstName가 lastName에 값이 할당되고 남은 값들을 ...otherInformation에 배열 형태로 담는 로직이다.


3. Maps & Sets
JS에서는 3개의 주요 데이터 구조가 존재한다. (array, sets, maps)
Array => 배열 메서드 사용가능, 요소의 순서가 보장된다. 중복를 허용한다. 인덱스를 사용한다.
Sets => 데이터 구조를 뜻하며, 배열 메서드가 아닌 sets 메서드를 사용한다. Array.from 메서드를 통해 이터러블 set를 배열로 변환할 수 있다. 요소의 순서를 보장하지 않는다. 중복을 허용하지 않는다. 인덱스 기반으로 접근하지 않는다.
Maps => 키-값으로 데이터를 저장한다. maps은 키로 배열이나 또 다른 객체를 가질 수 있다. (일반 객체는 불가능)
maps 메서드를 사용한다. 순서를 보장한다. 중복 키는 허용하지 않는다. 값의 중복은 허용된다. 키로 값에 접근한다.


4. Sets
- 셋(Set)은 중복을 허용하지 않는 값을 모아놓은 특별한 컬렉션이다.
- 셋(Set)은 키가 없는 값을 저장한다는 점에서 배열(array)과 유사하다.

new Set(iterable) : 셋 객체를 만든다. (배열이나 이터러블 객체를 전달하면 그 안의 값을 복사해 셋에 넣어준다.)
add(value) : 값을 추가한다.
delete(value) : 값을 제거한다. (삭제되었으면 true, 값이 없는 등 삭제가 안됐으면 false 반환)
has(value) : 셋(Set) 내에 값이 존재하면 true, 아니면 false를 반환한다.
clear() : 셋(Set) 안의 모든 요소를 제거한다.
size : 셋(Set) 객체 안에 있는 요소의 개수를 반환한다.
keys() : 셋 내의 모든 값을 포함하는 반복 가능한 iterable(이터러블) 객체를 반환한다.
values() : keys()와 동일한 작업을 한다. (맵과의 호환성을 위해 만들어진 메서드다.)
entries() : 셋 내의 각 값을 이용해 만든 [value, value] 배열을 포함하는 이터러블 객체를 반환한다. (맵과의 호환성을 위해 만들어진 메서드다.)
forEach(callFuc(value, valueAgain, set)) : 내장 메서드인 forEach 반복문이다. (맵과의 호환성을 위해 콜백 변수가 3개이며, 두번째 valueAgain 역시 첫번째 value 와 동일한 값을 반환하다.)\

=> values(), entries() => 맵과 호환하기 위해서 만들어진 메서드이다.
=> 같은 값이 두 번 반환된다. 키-값으로

배열을 셋으로, 셋을 배열로 변환하기



5. Maps
프로퍼티 => 객체 내부의 속성이라고 불린다.
프로퍼티는 key : value 형식이다. key는 속성명/ value는 속성값이라고 불린다.
메서드는 value가 함수인것을 의미한다.

키가 있는 데이터를 저장하는 데이터 구조
문자열 키 뿐만아니라 다양한 자료형 키도 허용된다.
삽입된 순서 유지한다.
맵에 배열이나 set을 넣으면 키-값을 가진 맵객체로 변하는 것이다.

map의 프로퍼티와 메서드
new Map(iterable) : 맵 객체를 만든다. (매개변수로 [키, 값] 으로 이루어진 배열이나 이터러블 객체를 전달하면 그안의 값을 복사해 맵에 넣어준다.)
set(key, value) : key를 이용해 value를 저장한다.
get(key) : key에 해당하는 값을 반환한다. (key가 존재하지 않으면 undefined를 반환한다.)
has(key) : key가 존재하면 true, 존재하지 않으면 false를 반환한다.
delete(key) : key에 해당하는 값을 삭제한다. (key가 삭제되었으면 true, 키가 없는 등 삭제가 안됐으면 false 반환)
clear() : 맵(Map) 안의 모든 요소를 제거한다.
size : 맵 객체 안에 있는 요소의 개수를 반환한다.
entires() => 이 메소드는 맵 객체처럼 키-값을 쌍으로 묶은 이터레이터를 반환한다. (키-값이 하나로 되어있어서 for of를 돌 수 있는 것이다.)
keys() : 각 요소의 키를 모은 반복 가능한 iterable(이터러블) 객체를 반환한다.
values() : 각 요소의 값을 모은 반복 가능한 iterable(이터러블) 객체를 반환한다.
forEach(callFuc(value, key, map)) : 배열과 유사하게 내장 메서드인 forEach 반복문을 지원한다.


맵은 키로 객체를 허용한다. 객체의 키에는 문자열만 사용된다. 그러나 맵에서는 객체의 키를 객체로 사용할 수 있다.)

ex) const c = new Map(1,2,3);
=> 허용되지 않는다.

ex) const c1 = new Map([12,21],[20,22]);
=> 허용되지 않는다.

mpa의 값은 []로 이루어진 키-값의 배열이거나 Iterable객체이다. 근데 new Map([1,2,3], [1,2,3])을 허용하지 않는다. []에 묶여 있어야 인식한다. => [[1,2],[4,5]]

ex) for(const [key,values] of player2.entries()){
    console.log(key)
    console.log(values)
}
console.log(player2.entries())
=> 이건 그냥 외우지 공식이다.


맵을 객체로/ 객체를 맵으로 바꾸는 방법
Object.entreis - object를 map으로 변환
Object.fromEntries - map을 object로 변환 (자료가 map에 저장되어있는데, third-party code에서 자료를 object로 넘겨받길 원할 때 이 방법을 사용할 수 있음)








































