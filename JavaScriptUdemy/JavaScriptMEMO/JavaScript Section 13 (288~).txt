1. DataSet 사용하기
DataSet은 HTML5에서 새로 확장된 속성이다. JS가 표준화된 DOM 메서드로 데이터셋 속성에 접근할 수 있다.

DataSet은 data-속성명 = "속성값"으로 이루어진다. DOM 속성으로 변할 때는 data-는 제외되고 속성명만 실제 속성 이름으로 사용한다.

JS는 DOM 생성 시점에 data-로 시작하는 속성들을 모아 dataSet이라는 Map으로 모아 관리한다.
JS에서 객체 프로퍼티 접근 방법으로 각각의 속성에 접근할 수 있다.

2. 요소 박스 차원 구하기
getBoundingClientRect() => DOM요소에 대한 크기와 위치를 알 수 있는 객체를 반환한다.
왼쪽에서 오른쪽으로 가는 x축/ 위쪽에서 아래쪽으로 y축이 존재한다. 모든 시작점은 왼쪽 최상단이다.
x:100, y:100 => 해당 요소의 왼쪽 모서리의 위치는 상단에서 100픽셀 떨어져있고 왼쪽에서 100픽셀 떨어져 있다.
top과 left의 값은 x와 y와 같다.
width과 height은 요소의 넓이와 높이를 의미한다.


3. 요소 크리 & 위치로 작업하기

DOM 트리의 대한 프로퍼티들이다.
offsetTop, offsetLeft => JS가 불러올 수 있는 top과 left이다.
clientTop, clientLeft => JS가 불러올 수 있는 컨텐츠와 요소의 차이의 크기이다.
offsetWidth, offsetHeight => JS가 불러올 수 있는 넓이와 크기
clientWidth, clientHeight => 테두리와 스크롤바를 제외한 내부 넓이와 높이이다.
scrollHeight => 요소의 스크롤이 있다면 그 높이까지 계산하여 반환하는 값
scrollTop => 사용자가 스크롤링을 얼마나 내렸는지 계산하여 값을 반환 => 동적이다.

window.innerWidth => 문서 전체의 넓이
window.innertHeight => 문서 전체의 높이
이 윈도우 프로퍼티들은 스크롤이 있는 경우 그 스크롤의 넓이와 높이도 포함하여 반환한다.

document.documentElement.clientWidth/document.documentElement.clientWidth
=> 단순히 문서의 넓이와 높이만 필요할 때는 이 JS 프로퍼티가 더 정확하다.

=> 이 프로퍼티들은 읽기 전용이다. set은 불가하다.


4. DOM & 프로토타입
JS안에서 노출된 DOM API는 여러 생성자 함수에서도 동작한다.
EventTarget> Node > Element > HTMLElement > HTMLInputElement...etc
=> 이렇게 프로토타입 체인이 되어 있다.


5. 툴팁 위치시키기
3의 프로퍼티를 사용해서 moreInfo을 반환한다. => 이 떄 scrollTop을 이용해서 동적으로 위치를 계산하여 DOM을 반환한다.


6. 스크롤 다루기
scrollTo() => 왼쪽, 오른쪽, 위, 아래로 얼마나 스크롤 할지 설정한다.
scrollBy() => 스크롤 내에서 얼마나 많은 픽셀만큼 움직이고 싶인지 설정한다.
scrollTo는 한 번 움직이면 재동작하지 않고(해당 위치로 움직이는 것이다.) scrollBy는 재동작한다.(인자의 값만큼 움직이는 것이다.)
위 메서드들의 인자로 두 개를 줄 수 있다. 하나는 x값, 하나는 y값이다.

scrollIntoView() => 해당 돔이 Browser로 위치가 변경되었을 떄 그 위치가 scroll안이라면 해당 돔이 스크롤의 중심이되게하는 메서드이다. 인자로 객체를 줄 수 있다. {behavior : 'smooth or auto or instant'};

7. <template> 태그로 작업하기
JS의 innerHTML을 사용하면 빠르게 처리할 수 도 있지만 무결성을 잃고 innerHTML이 길어지면 오히려 더 난해해진다.
=> 이러한 상황들을 해결하기 위해서 HTML의 <template> 태그를 사용하자

template 
=> 요소 내의 콘텐츠는 페이지가 로드될 때 즉시 렌더링되지 않으며, 따라서 사용자에게는 보이지 않는다.
=> 하지만 나중에 자바스크립트를 사용하여, 해당 콘텐츠를 복제한 후 보이도록 렌더링할 수 있다.

JS에서 template을 가져와서 동적으로 사용하는 방법
1. template은 DOM 노드임으로 id을 주어서 getElementById로 가져온다.
2. 가져온 template dom의 template 안의 컨텐츠들은 #document-fragment로 감춰져 있다.
3. 안의 컨텐츠를 조작하기 위해서 document.importNode(tooltipTemplate.content, true); 메서드를 사용한다.
4. 일반 DOM으로 사용한다.
 
















