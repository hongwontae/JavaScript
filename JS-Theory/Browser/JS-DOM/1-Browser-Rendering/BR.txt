1. 렌더링
HTML, CSS, JS로 작성된 문서를 파싱하여 브라우저에 사용자가 눈으로 볼 수 있도록 시각적으로 출력하는 것을 말한다.

렌더링 엔진 : HTML,CSS 등을 읽어 들여 사람이 읽을 수 있는 문서로 표시하는 웹 브라우저의 핵심 기능을 담당하는 소프트웨어

2. 파싱
프로그래밍 언어의 문법에 맞게 작성된 텍스트 문서를 읽고, 실행하기 위해 텍스트의 문자열을 분해하고 
구조를 생성하는 일련의 과정을 말한다.


3. 렌더링 과정

3-1. HTML 파싱과 DOM 생성
브라우저 요청 => 서버가 응답하여 HTML 응답 => 단 브라우저가 받은 HTML은 문자열로 이루어진 텍스트이다.
=> 해당 HTML을 브라우저가 이해하도록 번역해야한다.

1. 서버가 메모리에 저장된 HTML을 바이트(2진수)로 브라우저에게 전송한다.
2. 브라우저는 응답받은 HTML을 meta tag 속성의 charset 인코딩 방식에 의거하여 문자열로 변환한다.
3. 문자열로 변환된 HTML 문서를 읽어 들여 문법적으로 더 이상 나눌 수 없는 기본적인 언어 요소인 '토큰(token)'들로 분해한다.
4. 각 토큰들을 객체로 변환하여 컴퓨터 과학에 쓰이는 기초적인 단위인 '노드(node)'를 생성한다.
노드는 이후 DOM을 구성하는 기본 요소가 된다.
5. 이러한 노드들은 body 태그 안에 div를 넣고 그 안에 또 p를 넣듯이 중첩될 수 있는데, 
이러한 중첩 관계에 의해 부자관계가 형성된다. 부자관계를 반영하여 모든 노드들을 트리 자료구조로 구성한다.

=> 이러한 과정을 거쳐서 브라우저가 이해할 수 있는, 노드들로 구성된 트리구조를 DOM이라고 한다.
=> DOM은 HTML 문서를 파싱한 결과물이다. 


3-2. CSS 파싱과 CSSOM 생성
렌더링엔진이 DOM을 생성하고 있을 떄 link, style 태그를 만나면 DOM 생성을 멈추고 CSSOM을 생성한다.
CSSOM이 마무리되면 다시 DOM을 생성한다.

CSSOM을 만드는 과정은 HTML DOM을 만드는 과정과 유사하다.(바이트 => 문자 => 토큰 => 노드 => CSSOM);


3-3. 렌더 트리 생성
1. DOM과 CSSOM이 생성되면 이 둘은 렌더링을 위해 렌더 트리(Render Tree)로 결합된다.
2. 렌더 트리는 브라우저 화면에 보여지지 않는 것들은 포함하지 않는다. (meta tag, display : none)
3. 렌더 트리는 브라우저 화면에 렌더링되는 노드만으로 구성된다.
4. 렌더 트리를 기반으로 요소의 위치, 크기 등을 계산한다. 이를 Layout이라고 부른다.
5. 이후 요소에 스타일을 적용한다. 이를 paint라고 한다.


4. 브라우저 리렌더링
4-1. 자바스크립트에 의한 노드 추가 또는 삭제될 때 (ex. Element.insertAdjacentHTML())
4-2. 브라우저 창 리사이징에 의한 뷰포트(현재 화면에 보여지고 있는 다각형(보통 직사각형)의 영역) 크기가 변경될 때
4-3. HTML 요소의 레이아웃에 변경을 발생시키는 width, height 등의 스타일이 변경되었을 때
=> 레이아웃 계산과 페이팅이 다시 실행된다. => 리렌더링이라고 부른다.


5. JS 파싱과 실행
DOM은 HTML의 구조 및 정보뿐만 아니라 HTML 요소를 제어할 수 있는 DOM API를 제공한다.

5-1. HTML => script태그를 만나면 렌더링 엔진의 코드 제어권을 JS엔진에게 넘긴다.

5-2. JS엔진을 통해 AST(추상적 구문 트리)를 생성하고 AST를 기반으로 인터프리터가 실행할 수 있는 중간 코드인 바이트
코드를 생성하여 실행한다.

5-3. DOM이 생성되지 않았는데 JS가 DOM API를 사용하면 에러가 발생하거나 원치 않는 효과를 얻는다.
=> script 태그를 맨 밑에 넣거나 defer를 사용한다.

async => HTML 파싱과 JS 파일 로드가 비동기적으로 처리되지만 JS가 로드되면 DOM을 막고 JS를 실행시켜버린다.
defer => HTML 파싱과 JS 파일 로드는 동시에 이루어지고 DOM 생성이 완료되면 그떄 JS를 파싱하고 실행한다.


6. reflow
리플로우는 요소의 너비, 높이, 위치 등이 변경되어 렌더트리를 재생성하는 작업이다.

6-1. 리플로우 발생 시점
a. DOM 요소의 기하학적 속성이 변경될때 (width, height 등)
b. 브라우저 사이즈가 변할때
c. DOM 관련 메소드를 실행하거나 DOM의 속성에 접근(기하학적 속성, 브라우저 size);

6-2. 리플로우가 발생하면 주변 요소에도 영향을 주기 떄문에 비용이 큰 작업이다.

렌더트리 재구축 => 리플로우 => 리페인트


7. repaint
변경된 요소를 화면에 그려주는 작업을 리페인트라고 한다.

7-1. 리페인트 발생 시점
a. 리플로우가 발생했을 때
b. 요소의 스타일(색상, 배경색 등)이 변경되었을 때
c. visibility: hidden ↔ visble로 변경될 때

7-2. 리플로우보다 비용이 적다.

=> 렌더트리 재구축 => 리페인트









