1. 비동기 처리란?
특정 코드의 연산이 완료될 때까지 전체 코드의 실행을 중단하지 않고, 다음 코드를 우선적으로 실행하는 방식

1-1. 비동기 처리는 작업 완료 시점을 예측하기 어렵다.
1-2. JS는 싱글 스레드, 한 번에 하나의 작업을 한다.
=> 이벤트 루프 덕분에 비동기 처리가 가능하다.

1-3. fetch, setTimeout.. 등의 함수들은 자체적으로 비동기적으로 실행한다.


2. 콜백 함수
정의 : 어떤 함수의 인자로 전달되는 함수

2-1. 특정 연산이 완료된 이후에 실행될 코드를 함수 형태로 정의하는 방식
2-2. 콜백 함수를 사용하는 이유는 비동기 처리의 동기적 처리를 위해 사용된다.
2-3. 다만 콜백이 너무 중첩되면 가독성이 떨어지고 유지보수가 어려워진다. 이를 콜백 지옥이라고 부른다.
2-4. 콜백함수만으로는 에러처리가 힘들다. => 콜백 큐에 간 콜백함수의 호출자가 누군인지 식별할 수 없기 떄문이다.


3. Promise
정의 : 비동기 처리에 사용되는 자바스크립트 객체로, 비동기 작업의 최종 완료(또는 실패)와 그 결과 값을 나타낸다.

3-1. Promise는 상태와 값이라는 두 가지 속성을 가지고 있다.

3-2. 상태, 값
1. 대기(pending): 아직 작업이 완료되지도 않았고, 실패하지도 않은 초기 상태
=> 결과값에 undefined가 담긴다.

2. 이행(fulfilled): 작업이 성공적으로 완료된 상태
=> 성공시 반환 값이 담긴다.

3. 거부(rejected): 작업이 실패한 상태
=> 에러의 내용이 담긴다.

3-3. Promise 객체는 한 번 성공하거나 실패하면 그 상태가 고정된다.

3-4. Promise는 then(), catch(), finally() 등의 메서드를 제공한다.
1. then(): Promise가 성공적으로 이행(완료)될 때 실행할 코드를 작성한다.
2. catch(): 작업이 거부(실패)했을 때 실행할 코드를 작성한다.
3. finally(): 작업의 성공, 실패 여부와 관계없이 마지막에 무조건 실행되어야 하는 코드를 작성한다.
=> 해당 메서드들도 Promise를 반환한다.

3-5.  Promise 객체는 'executor'라는 함수를 인자로 받아 생성된다.
executor 함수는 new Promise 객체가 생성되자마자 실행되며, 두 개의 콜백 함수를 인자로 받는다.
1. resolve: 비동기 작업이 성공적으로 완료되었을 때 호출되는 함수. 이 함수를 통해 Promise는 성공(fulfilled) 상태가 됨.
2. reject: 비동기 작업에 문제가 생겼을 때 호출되는 함수. 이 함수를 통해 Promise는 거부(rejected) 상태가 됨.

3-6. Promise를 리턴하는 함수는 내부에서 실행되어 성공이나 실패 상태를 갖는다.

*** 프로미스의 객체 내부에서 비동기 로직이 처리되고 상태를 얻은 후 then, catch, finally을 사용한다. (이 떄는 동기적 로직)


4. async/await

4-1. async 
항상 Promise를 반환하며, 만약 반환 값이 프로미스가 아니라면, 
Promise.resolve 메서드에 의해서 자동으로 Promise를 감싸서 반환한다.

4-2. await
=> async 함수 내부에서만 사용이 가능
=> 프로미스의 상태가 성공이나 실패가 될떄까지 기다린다. (resolve 값이 담겨버린다.)
=> 동기적 실행을 위해서

4-3. await의 실행이 실패되면 try-catch 블록으로 에러를 잡을 수 있다.

4-4. await를 만나면 promise의 resolve를 반환한다. 그것이 promise가 아닐지라도..


5. Promise와 async/await의 이벤트루프
5-1. 일반적인 Promise라면 then, catch, finally의 콜백함수가 콜백 큐에 담긴다.

5-2. await 키워드를 만나면 그 지점에서 일시정지한다. await 이후의 코드부터 콜백 큐에 담긴다.
=> 내부의 Promise 로직이 멈추는 것이 아니다. 프로미스의 로직을 실행한 함수의 콜 스택 호출을 벗어나면 await 키워드 떄문에
밑에 있는 모든 코드들이 마이크로테스크 큐로 가는 것이다.




