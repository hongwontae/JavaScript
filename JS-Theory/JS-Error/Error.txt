1. 일반적인 JS의 에러처리
1-1. 코드 실행중에 에러가 발생했다.
1-2. 해당 함수나 코드 실행을 멈추고 에러가 발생한 이유와 발생한 함수의 정보가 담긴 객체가 콜 스택에 던져진다.
(이 떄 에러 객체는 자동으로 생성된다. 그리고 자동으로 throw 된다.)
1-3. 이를 통해 에러에 대해서 파악할 수 있다.


2. try-catch 에러처리
2-1. try 중에 에러가 발생하면 catch 문을 실행한다.
2-2. catch 문의 인자는 error 객체가 담겨있다. (1에서 자동으로 생성된 에러 객체처럼)
2-3. error 객체에는 message(JS가 자동으로 생성한 에러 Reason)과 stack(에러가 발생된 라인)이 포함된다.
2-4. 인위적으로 new Error('Error Occurred')을 호출해서 자신만의 에러 객체를 생성할 수 있다.
2-5. throw를 던지지 않으면 그냥 전체적인 코드를 막지않고 코드를 실행한다.


3. window.onerror = (message, url, line, column, error)=>{};
=> 전역적으로 에러를 처리할 수 있다.


4. Promise().then(..).catch();
=> Promise을 반환하는 함수 자체에서 에러나 then 내부에서의 에러 모두 catch에서 잡아서 처리한다.


5. try나 then 블록내에서 throw를 던졌을 떄
5-1. catch 블록으로 넘어간다.
5-2. 다만 throw를 던질 떄 throw new Error(...)이나 다른 변수들을 넣으면 catch의 err 인자가 그것을 받는다.


6. async/await
try-catch 내부에서 실행되면 에러가 발생하면 catch에서 잡는다.


7. 예외 전파
7-1. 예외가 발생하면 발생한 함수의 호출 스택을 따라 상위 함수로 전파된다.
7-2. catch가 존재하면 이를 통해서 에러를 처리한다. 그렇지 않으면 자동으로 1처리가 된다.
