1. Object.assign(n, ...)
=> 여러 객체를 하나로 합칩니다.
=> 첫 번쨰 인자만 사용하면 복사 효율이 떨어집니다. (그대로 주소만 복사하기 때문입니다.)
=> n1 다음 인자부터는 얕은 복사입니다.


** Object.hasOwn(obj, key)
=> 객체가 해당 key를 가지고 있는지 확인합니다. (prototype은 제외)


2. Object.keys(obj)
=> 객체의 키만 담은 배열을 반환한다.


3. Object.values()
=> 객체의 값만 담은 배열을 반환합니다.
=> const a = {name : 'HWT', password : '123'} Object.valuse(a) => ['HWT', '123']

=> keys(), values()는 모두 배열을 반환합니다.


4. Object.entries()
=> [키, 값] 쌍을 담은 배열을 반환합니다.


5. Object.fromEntries()
=> [키, 값] 형태의 배열을 객체로 반환합니다.


6. Object.is()
=> 두 값이 같은지를 비교합니다.
=> 모든 NaN 값은 같다고 처리된다.


7. Object.freeze() / Object.isFrozen()
=> 객체를 프리징(freeze)합니다. 즉, 다른 곳의 코드에서 객체의 속성을 지우거나 바꿀 수 없습니다.
=> 객체가 프리징 되었는지 확인합니다.


8. Object.seal() / Object.isSealed()
=> 다른 코드가 객체의 속성을 삭제하지 못하도록 합니다.
=> 객체가 실링(seal) 되었는지 확인합니다.


9. Object.getPrototypeOf()
=> 명시된 객체의 프로토타입을 반환.


10. Object.setPrototypeOf()
=> 프로토타입(즉, 내부의 [[Prototype]] 속성)을 설정합니다.


11. Instanceof (key-word)
=> 해당 변수가 객체인지 비교하거나, 객체가 특정 생성자의 자식인지 조회할 수 있습니다.


12. delete (key-word)
=> 객체 내의 속성을 지울 수 있습니다. 성공하면 true를 실패하면 false를 반환합니다.
=> configurable이 false거나 freeze된 상태면 실패합니다.
=> delete objName.key 구조


13. hasOwnProperty()
=> 특정 프로퍼티가 해당 객체에 존재하는지를 검사합니다.
=> 해당 객체에서 직접 선언된 프로퍼티만을 검사하며, 같은 이름의 프로퍼티라도 상속받은 프로퍼티는 false 값을 반환합니다.


14. propertyIsEnumerable()
=> 특정 프로퍼티가 해당 객체에 존재하고, 열거할 수 있는 프로퍼티인지를 검사합니다.
=> 이 메소드는 hasOwnProperty() 메소드의 결과가 true이면서, 동시에 열거할 수 있는 프로퍼티인지를 검사합니다
=> 열거 가능 => for..in을 사용할 수 있는가?


15. isPrototypeOf()
=> 특정 객체의 프로토타입 체인에 현재 객체가 존재하는지를 검사합니다.


16. toString()
=> 이 메소드를 호출한 객체의 값을 문자열로 반환합니다.
