5. 객체 리터럴 방식으로 생성된 객체의 프로토타입 체인

5-1. 객체 생성 방법은 3가지 존재 => 객체 리터럴, Object(), 생성자 함수
5-2. Object() 방식은 new을 사용하지 않아도 내부적으로 new 처리가 되어 객체가 만들어지고 prototype이 전달된다.
5-3. 객체 리터럴 방식은 Object()을 내부적으로 처리하는 것이다. => let a = {} === let a = Object({})

5-4. 리터럴, Object(), 생성자 함수는 모두 함수이다. => Function.prototype을 받아서 [[Prototype]]에 저장되어 있다.
5-5. Object()는 prototype을 객체에 내려준다. 객체는 .prototype으로 내려준 객체를 [[Prototype]]이라는 내부 슬롯에 저장하고 사용한다.


6. 생성자 함수로 생성된 객체의 프로토타입

6-1. 함수를 생성하는 방식 => 함수 선언문, 함수 표현식, new Function 생성자 함수
(* 함수 리터럴 방식 => new Function인데 이를 단순화한 방식)
6-2. 함수 표현식이나 함수 선언문은 함수 리터럴 방식이다.
6-3. new Function으로 만들었기 때문에 Function의 .prototype이 [[Prototype]]에 저장되어 있는 함수 객체들이다.


7. 모든 객체는 Object.prototype 객체에 프로토타입 체인이 끝나기 떄문에 해당 객체를 프로토타입 체인의 종점이라고 한다
=> 한 단계 더 위는 null이다.


8. 프로토타입 객체의 확장
부모 객체의 prototype에 프로퍼티를 추가하면 즉시 적용된다.
=> 자식 객체에서 바로 사용이 가능하다.


9. 원시타입 프로토타입
9-1. 원시타입은 프로퍼티와 메서드를 가질 수 없지만 일시적으로는 가능하다.
9-2. 프로퍼티나 메서드를 호출할 떄 일시적으로 래퍼객체로 덮여져 호환이 가능해진다.
9-3. 9-2 시점에 프로토타입 개념이 적용되기 떄문에 String.prototype.method = ()=>{}을 사용할 수 있다.


10. 프로토타입 객체의 변경
10-1. 객체를 생성할 떄 프로토타입이 결정된다.
10-2. 생성자 함수의 .prototype에 직접적으로 값을 할당해버리면 constructor가 파괴되고 대체된다. 
또한 타입이 객체 형식이 아니라면 .prototype에 있는 [[prototype]]도 사라진다.
10-3. .prototype에 값을 추가하면 그것 또한 자식 객체의 프로토타입 체인상에 있다.

function Style(){
    this.name = 'hwt'
};
Style.prototype.gender = 'Female';
=> 스타일의 prototype은 constructor, [[prototype]], gender : 'Female'이 존재하는 것이다.


11. 최종 정리
prototype은 내부 함수에서 건네주는 청사진이다.
.prototype 내부의 [[prototype]]이 부모 프로토타입이다. 
=> 내부 [[prototype]]은 받은 것, .prototype은 내가 정해서 건네주는 것이다.
