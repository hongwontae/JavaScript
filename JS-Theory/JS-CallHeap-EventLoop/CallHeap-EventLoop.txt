1. JS Engine

1-1. 싱글 스레드 기반의 언어
1-2. 하나의 콜 스택만 사용
=> 한 번에 한 가지일만 처리할 수 있다.

1-3. 블로킹(Blocking) vs 논블로킹(Non-blocking)
블로킹 => 하나의 작업이 완료될 떄까지 모든 작업을 막는다.
논 블로킹 => 여러 작업을 동시에 시작할 수 있다.


2. 콜 스택
2-1. 함수 호출을 관리하는 데이터 구조/ 데이터 구조를 스택이라고 부른다. 함수 호출 시 실행 컨텍스트 저장 + 실행된다.
2-2. 새로 추가하는 함수가 제일 꼭대기에 위치한다.
2-3. return 키워드 or 실행할 코드 없다면 스택 제일 위 항목을 제거한다.
=> FILO(First In Last Out) 구조
2-4. 콜 스택은 실행 컨텍스트의 추가 및 제거를 통해 코드의 실행순서 관리 => 실행 컨텍스트 스택이라고도 불린다.

** 원시 타입의 값을 저장하는 공간도 콜 스택이다.


3. 힙 메모리
3-1. 콜 스택의 실행 컨텍스트가 실행되면서 참조되는 객체(value)들이 저장되어 있는 메모리 공간이다. (함수, 배열, 객체)
3-2. 객체의 크기는 런타임에 결정(실행된 이후 동적으로)되기 떄문에 객체가 저장되는 힙은 구조화되어 있지 않다.


4. JS 엔진은 JS 코드를 파싱하고 실행한다. => V8를 의미한다.
4-1. JS 엔진이 가지고 있는 부분이 콜 스택과 힙 메모리이다.


5. Web APIs, 콜백 큐는 JS 엔진 외부에서 관리한다.
5-1. 브라우저나 Node.JS에서 관리한다.

5-2. Web APIs
브라우저가 제공하는 다양한 기능들을 의미한다. ex)HTTP 요청, setTimeout..
=> 이러한 작업들은 주로 비동기적으로 처리가 되므로 완료 시점을 정확히 알 수 없다.
=> setTimeout의 지연, clear 같은 작업이 실행되는 곳이다.

5-3. Callback queue
비동기 작업(예: setTimeout, HTTP 요청)의 결과나 나중에 실행되어야 하는 작업들이 대기하는 공간
FIFO(First In First Out) 구조이다. 여기에 있는 콜백 함수들은 콜스택이 비어졌을 때 먼저 대기열에 들어온 순서대로 수행된다.

콜백 큐에는 3가지 종류가 존재한다.

1. 태스크 큐(Task Queue)
일반적으로 매크로 태스크(Macrotask Queue)라고도 부른다.
setTimeout, setInterval 등의 비동기 작업이 이곳에 들어간다.

2. 마이크로태스크 큐(Microtask Queue)
프로미스(Promise)의 콜백 함수나 async / await과 같은 코드가 이곳에 들어갑니다.

3. 애니메이션 프레임(Animation Frames)
브라우저 환경에서 화면을 업데이트하는 작업도 비동기적으로 처리된다.
requestAnimationFrames과 같은 코드가 여기에 해당된다.

* 마이크로태스크 큐(Microtask Queue) > 애니메이션 프레임(Animation Frames) > 태스크 큐(Task Queue) 순으로  
Microtask Queue가 가장 먼저 실행되고 Task Queue가 가장 늦게 실행되는 우선순위를 가지고 있다.


6. Event Loop
정의 : CallStack과 Callback queue를 지속적으로 확인하여 콜스택이 비워져있으면 콜백큐에서 가장 오래된 작업을 콜 스택으로
옮기는 것을 의미한다.


7. 이벤트 루트 동작 과정
7-1. 콜 스택(Call Stack) 확인
=> 이벤트 루프는 먼저 현재 콜 스택이 비어 있는지 확인한다. 만약 콜 스택에 아직 처리되지 않은 함수가 있다면, 
해당 함수가 완전히 실행될 때까지 기다린다.

7-2. 콜백 큐(Callback Queue) 확인
=> 만약 콜 스택이 비어 있다면, 이제 콜백 큐를 확인한다. 콜백 큐에는 웹 API 등에서 생성된 콜백 함수들이 대기한다.

7-3. 함수 이동
=> 콜백 큐에서 가장 오래된 함수를 꺼내서 콜 스택으로 옮긴다.

7-4. 함수 실행
=> 이제 해당 함수가 콜 스택에서 실행되고 실행이 끝나면 콜 스택에서 빠져나가게 됩니다.


8. async, await 동작 방식
*** 



