1. DOM
1-1 모든 요소와 요소의 어트리뷰트, 텍스트를 각각의 객체로 만들고 
이들 객체를 부자 관계를 표현할 수 있는 트리 구조로 구성한 것이 DOM이다.

1-2. DOM의 기능
1. HTML 문서에 대한 모델 구성
=> 해당 HTML의 모델을 메모리에 생성한다. => DOM  Tree
2. HTML 문서 내의 각 요소에 접근 / 수정
=> DOM은 모델 내의 각 객체에 접근하고 수정할 수 있는 프로퍼티와 메소드를 제공한다.


2. DOM Tree
=> DOM tree는 네 종류의 노드로 구성된다.

1. 문서 노드(Document Node) : DOM tree에 접근하기 위한 시작점(entry point)이다.

2. 요소 노드(Element Node) : 요소 노드는 HTML 요소를 표현한다./
/ HTML 요소는 중첩에 의해 부자 관계를 가지며 이 부자 관계를 통해 정보를 구조화한다.
/ 어트리뷰트, 텍스트 노드에 접근하려면 먼저 요소 노드를 찾아 접근해야 한다.
/ HTMLElement 객체를 상속한 객체로 구성된다.

3. 어트리뷰트 노드(Attribute Node) : HTML 요소의 어트리뷰트를 표현한다.
/어트리뷰트 노드는 해당 어트리뷰트가 지정된 요소의 자식이 아니라 해당 요소의 일부로 표현된다. 

4. 텍스트 노드(Text Node) : 텍스트 노드는 HTML 요소의 텍스트를 표현한다./  텍스트 노드는 요소 노드의 자식이며 자신의 자식 노드를 가질 수 없다.
/ 텍스트 노드는 DOM tree의 최종단이다.

5. DOM 조작 순서
요소 선택 => 요소의 컨텐츠, 어트리튜브 조작


3. DOM-Query

3-1. document.getElementById(id)
=> attr/id 하나만 선택한다.
=> 복수일 경우 첫 번쨰 요소만 선택

3-2. document.querySelector(cssSelector)
=> css selector를 사용하여 하나만 선택한다.
=> 복수일 경우 첫 번쨰 요소만 선택

3-3. document.getElementsByClassName(class)
=> css class 여러 개를 선택한다.
=> 공백으로 구분하여 여러 개의 class를 지정할 수 있다.
=> Return: HTMLCollection (live)

3-4. document.getElementsByTagName(tagName)
=> 태그명으로 요소 노드를 모두 선택한다.
=> Return: HTMLCollection (live)

3-5. document.querySelectorAll(selector)
=> 지정된 CSS 선택자를 사용하여 요소 노드를 모두 선택한다.
=> Return: NodeList (non-live)


// HTMLCollection vs NodeList


4. HTML Contents 조작
4-1. textContent
=> 요소의 텍스트 콘텐츠를 취득 또는 변경한다.
=> 마크업은 무시된다.
=> 순수한 텍스트만 다룬다.

4-2. innerText
=> 요소의 텍스트 콘텐츠에만 접근할 수 있다. => textContent와 비슷하다.
=> 비표준, CSS에 종속적 => visibility : hidden이면 텍스트 반환 x

4-3. innerHTML
=> 해당 요소의 모든 자식 요소를 포함하는 모든 콘텐츠를 하나의 문자열로 취득할 수 있다.
=> 이 문자열은 마크업을 포함한다.
=> innerHTML을 사용하여 새로운 DOM을 추가하거나 제거할 수 있다.
=> 크로스 스크립팅 공격(XSS: Cross-Site Scripting Attacks)에 취약하다.


5. DOM 요소, 텍스트 생성

5-1. createElement(tagName)
=> 태그이름을 인자로 전달하여 요소를 생성한다.
=> Return: HTMLElement를 상속받은 객체

5-2. createTextNode(text)
=> 텍스트를 인자로 전달하여 텍스트 노드를 생성한다.
=> Return: Text 객체

5-3. appendChild(Node)
=> 인자로 전달한 노드를 마지막 자식 요소로 DOM 트리에 추가한다.
=> Return: 추가한 노드

5-4. removeChild(Node)
=> 인자로 전달한 노드를 DOM 트리에 제거한다.
=> Return: 추가한 노드

5-5. insertAdjacentHTML(position, string)
=> 인자로 전달한 텍스트를 HTML로 파싱하고 그 결과로 생성된 노드를 DOM 트리의 지정된 위치에 삽입한다. 
첫번째 인자는 삽입 위치, 두번째 인자는 삽입할 요소를 표현한 문자열이다.
‘beforebegin’
‘afterbegin’
‘beforeend’
‘afterend’

