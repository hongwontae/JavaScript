1. DOM과 관련된 event과 실행되면 이벤트 핸들러의 매개변수에 event라는 객체가 전달된다.

(event.이 앞에 존재함)
2. bubbles
=> 이벤트가 버블링되는지 나타냄

3. cancelable
=> 이벤트의 기본 동작 취소가능 여부

4. currentTarget
=> 현재 이벤트를 처리중인 element
=> 이벤트 핸들러가 장착된 요소를 의미한다.

5. defaultPrevented
=> true면 preventDefault()호출상태

6. preventDefault()
=> 이벤트의 기본행동 취소, cancelable가 true일때 기능함

7.stopImmediatePropagation()
=> 이벤트캡처링,이벤트버블링 모두 취소하며 다른 이벤트 핸들러 호출을 막음.

8. stopPropagation()
=> 이벤트캡처링,이벤트버블링 모두 취소합니다. bubbles가 true일때 기능합니다.

9. target
=> 이벤트 타겟
=> 현재 이벤트가 트리거 된 요소를 의미한다.


10. currentTarget vs target
<ul>
<li><li>
<ul>
=> ul.addEventListener('click',()=>{console.log(targetm currentTarget)})
=> target은 li/ currentTarget은 ul


11. 브라우저 기본 동작
a => 클릭 시 url로 이동
form submit-button => 서버로 폼 전송
.. => 이벤트 발생시 이벤트 핸들러의 동작이 아닌 자신만의 기본 동작을 수행한다.

11-1. 위의 사항을 막기 위해 event.preventDefault()를 호출하면 된다.

