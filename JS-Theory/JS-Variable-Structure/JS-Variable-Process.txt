1. 변수 저장 원리 (feat. 콜스택, 힙스택)

** 재할당이란 메모리 주소의 변경을 의미한다.
let은 메모리 주소 변경을 허용한다. const는 메모리 주소 변경을 허용하지 않는다.

콜스택
변수 식별자(이름) 저장
스코프 체인 및 this 관리
코드 실행 순서 관리

메모리 힙
참조 타입 데이터 저장
메모리 할당

원시 타입 데이터 저장 방식
ex) let a = 10
원시 타입의 값은 콜 스택에 저장된다.
변수 a에는 콜 스택 메모리의 주소값이 저장된다.
(식별자 a는 콜스택 상의 실행 컨텍스트 렉시컬 환경에 저장)

let a = 10
a <= 콜스택 주소값 | 실제 값
이 떄 값이 변경되거나 재할당되면 실제 값이 바뀌는 것이 아니다.
20의 값으로 변경되었다고 하면 새로운 메모리를 확보하여 20을 저장하고 해당 주소값을 a에 전달하는 것이다.
이 후 사용하지 않는 값은 가비지 컬렉터에 의해 정리된다.


참조 타입 데이터 저장 방식
ex) let a1 = [1,2,3]
배열, 객체, 함수는 메모리 힙에 저장된다. => 실제 값은 메모리 힙에 저장된다는 뜻이다.
힙 메모리의 주소 값이 콜스택에 저장된다.
메모리 힙의 주소값이 저장된 콜 스택의 주소 값은 a1에 저장된다.
(식별자 a1는 콜스택 상의 실행 컨텍스트 렉시컬 환경에 저장)

let a1 = [1,2,3]
a1 <= 콜스택 주소값 | 힙 메모리 주소값 || 힙 메모리 주소값 | 실제 값
push, pop은 힙 메모리 주소값을 변경하는 것이 아니기 떄문에 const여도 에러없이 사용가능한 것이다.


2. let/ const
데이터의 값의 변경 유무는 데이터 값이 아니라 콜스택의 값을 기준으로 한다.
=> 실제 값의 변경은 const도 가능하다.


