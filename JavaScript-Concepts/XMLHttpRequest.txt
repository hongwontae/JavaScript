XMLHttpRequest는 서버와 통신를 위한 객체이다. Browser API이다.

XMLHttpRequest() => 생성자 함수이다. prototype이 존재하기 때문에 new 함수를 통해 객체를 만들어서 사용해야 한다.
ex) const xhr = new XMLHttpRequest();


XMLHttpRequest 객체의 프로퍼티

1. xhr.readyState => HTTP 요청 현재 상태를 나타내는 정수이다.  XMLHttpRequest의 정적 프로퍼티이다.
=> 정적 프로퍼티로써 new가 없이 사용할 수 있지만 prototype에도 있기 떄문에 new를 만들어서 사용도 가능하다.

2. xhr.status => HTTP 요청에 대한 응답 상태를 나타내는 정수

3. xhr.statusText => Http 요청에 대한 응답 메시지를 나타내는 문자열

4. xhr.responseType => HTTP 응답 타입

5. xhr.response => Http 요청에 대한 응답 몸체

6. xhr.responseText => 서버가 전송한 HTTP 요청에 대한 응답 문자열


XMLHttpRequest 객체의 이벤트 핸들러

1. onreadyStateChange => ready state 프로퍼티 값이 변경된 경우

2. onerror => HTTP 요청에 에러가 발생한 경우

3. onload => HTTP 요청이 성공적으로 완료한 경우

4. onTimeout => HTTP 요청 시간이 초과한 경우


XMLHttpRequest 객체의 메서드

1. open() => HTTP 요청 초기화

2. send() => HTTP 요청 전송

3. abort() => 이미 전송된 HTTP 요청 중단

4. setRequestHeader() => 특정 HTTP 요청 헤더의 값을 설정

5. getResponseHeader() => 특정 HTTP 요청 헤더의 값을 문자열로 반환


XMLHttpRequest 정적 프로퍼티 

1. UNSENT : 0 => open 메서드 호출 이전
2. OPENED : 1 => open 메서드 호출 이후
3. HEADERS_RECEIVED : 2 => send 메서드 호출 이후
4. LOADING : 3 => 서버 응답 중(응답 데이터 미완성 상태)
5. DONE : 4 => 서버 응답 완료


HTTP 요청 전송

1. XMLHttpRequest.prototype.open을 통해 HTTP 요청을 초기화한다.
xhr.open(method, url, [async])
=> method는 get,post,delete,put를 문자열로 넣는다.
=> URL는 문자열로 넣는다.
=> async 비동기 처리 여부이며 기본값은 true이다. 비동기 방식 === ture

2. 필요에 따라 XMLHttpRequest.prototype.setRequestHeaders 메서드로 특정 HTTP 요청의 헤더 값을 설정한다.
=> open() 메서드 이후에 호출한다.

content-type은 요청 몸체에 담아 전송할 데이터의 MIME 타입의 정보를 표현한다.

MIME 타입
=> 클라이언트에게 전송된 문서의 다양성을 알려주기 위한 매커니즘
=> 데이터가 어떤 타입인지 서버에 알려주는 것이라고 생각하면 된다.

MIME 타입
text		text/plain, text/html, text/css, text/javascript
application	application/json, application/x-www-from-..
multipart	multipart/form-data

3. XMLHttpRequest.prototype.send 메서드로 HTTP 요청을 전송한다.
xhr.send()
1. get일 경우 데이터를 URL의 일부분은 쿼리 문자열로 서버에 전송한다.
=> 이 경우 페이로드에 전달한 인수는 무시하고 요청 몸체는 NULL로 설정된다.
2. post일 경우 데이터(페이로드)를 요청몸체(request Body)에 담아 전송한다.
=> 이 경우 send()에 보낼 데이터가 JSON인 경우 JSON.Stringify() 메서드를 통해 JSON 데이터로 바꾸고 보내야 한다.




























