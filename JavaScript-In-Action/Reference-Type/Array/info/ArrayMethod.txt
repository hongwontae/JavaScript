Array Method

1. 배열은 객체이다.
2. 배열은 for-of 반복문으로 각 요소를 반환시킬 수 있다.


3. 배열을 생성하는 방법
3.1 const a = [1,2,3];

3.2 let b = new Array(1,2,3);
=> 인자가 하나라면 길이 n인 빈 배열 생성
=> 인자가 두 개 이상이라면 값을 요소로 합니다.

3.3 let c = Array.of(1,2,3);
=> 항상 값을 배열 요소로 취급합니다.

3.4 let d = Array.from(c); 
=> 인자로 넣은 유사배열객체를 실제 배열로 만드는 방법, 새로운 배열을 반환한다.
=> 두 번쨰 인자에 map 함수를 사용할 수 있습니다.


4. push, unShift, pop, shift
=> push는 맨 뒤에 추가, unShift는 맨 앞에 추가, pop은 맨 뒤 제거, shift는 맨 앞 제거
=> 맨 뒤에 추가하는 것은 Okay, 맨 앞에 추가하는 것은 성능 문제가 있을 수 도 있다.
(기존의 요소들을 다 뒤로 밀어야 하기 때문이다.)


5. splice();
=> *기존 배열*을 변경하는 메서드입니다. 반환값은 삭제대상이 된 요소들의 배열입니다.
=> splice(start, deleteCount, item1, item2,...)
=> start 인덱스부터 deleteCount 개수만큼 지우고 item1, item2..를 추가합니다.


6. slice();
=> 얕은 복사, 중첩된 배열의 중첩된 값은 새로운 참조값을 가지지 못한다.
=> 첫 번쨰 인자는 복사할 인덱스 시작점, 두 번쨰 인자는 가져올 배열의 길이
=> 아무것도 넣지 않으면 전체 복사한다.
=> start, end 모두 인덱스로 동작한다고 가정하고 start는 포함, end는 미포함으로 외우자.
=> 첫 번쨰 인자만 들어가면 start부터 끝까지 복사합니다.

ex) let a = [1,2,3,4,5];
    let a1 = a.slice(); => [1,2,3,4,5];
    let a2 = a.slice(2); => [3,4,5];
    let a3 = a.slice(1,4); => [2,3,4];


7. concat();
=> 배열을 합치는 메서드이다.


8. indexOf();
=> 해당하는 값에 대한 인덱스를 반환한다. 일치하는게 없다면 -1를 반환한다.
=> 배열안의 해당하는 값이 중복되어 있다면 첫 번쨰로 일치하는 것을 반환하고 메서드를 종료시킨다.
=> 중첩된 배열에서 원하는 것을 찾고 싶다면 두 번쨰 인자를 사용해야한다. 숫자를 넣으면 길이로 인식하여 그 이후부터 찾으라는 뜻이다.


9. lastIndexOf();
=> 무조건 뒤에서 부터 찾는다. 그리고 정방향 인덱스를 반환합니다.
=> 일치하는 값이 없다면 -1을 반환합니다.


10 find()
=> 콜백함수를 사용하여 배열에서 일치하는 값을 찾기 위해서 사용된다.
=> 일치하는 값을 찾으면 종료된다.


11. findIndex()
=> 콜백함수를 사용하여 배열해서 일치하는 인덱스를 찾기 위해서 사용된다.


12. includes();
=> 배열안의 값이 존재하는지 Boolean으로 나타낸다.


13. forEach();
=> 배열의 반복문, return값은 없다. 단지 배열에 대한 for문을 향상시키기 위해 만들어졌다.
=> forEach(currentValue, idx, arr){logic} 
=> currentValue : 현재 순환하고 있는 요소, idx : 인덱스, arr : forEach가 돌고 있는 배열 그 자체


14. map()
=> forEach와 로직은 같지만 반환값이 존재한다. arr이다.
=> 해서 return의 로직이 존재하고 변수에 대입이 가능하다.
=> 얕은 복사이다.


15. filter();
=> 배열을 순환하는데 조건에 맞는 값만 취합하여 반환한다.
=> 얕은복사이다.


16. reverse()
=> 배열의 순서를 뒤집는다.


17. sort(Callback)
=> 배열의 순서를 정렬시킵니다. 그리고 기존의 배열을 변경합니다. -> 복사하여 사용을 권장합니다.
=> sort는 콜백 함수를 받습니다. 콜백 함수가 없다면 요소를 문자열로 뱐환한 뒤 유니코드 순서로 정렬합니다.
=> 그렇기에 arr가 숫자로 이루어져있고 sort에 콜백함수가 없다면 의도하지 않은 결과가 나타납니다. (유니코드 순서이기 떄문에)

=> sort((a,b)=>{
    // 반환값이 음수라면 자리 유지
    // 반환값이 양수라면 a,b의 자리를 교환합니다.
    // 반환값이 0이라면 순서 유지
    return a-b
})          


18. reduce()
=> 누적계산기 로직을 가진다. 
=> reduce의 인자는 두 개이다. 1. 콜백함수, 2. this binding
=> 콜백함수 내의 인자는 4개이다.
1. acc : 초기값, 누적 계산이 된 값, 2. cur : 현재 순환하는 값, 3. idx : index, 4. arr : 순환하는 배열
=> 반환되는 값은 하나이다. 배열이 아니다. acc+=cur과 비슷하다.


19. split()
=> string method에서 배웠듯이 문자열을 배열로 만드는 메서드이다.
=> 인자로는 두 개를 받는다. 1. 구분자(구분자는 반환값에서 제외된다.), 2. 총 개수(숫자만큼 가져온다.)


20. Join()
=> 배열을 문자열로 만드는 메서드이다.
=> 인자는 하나이다. 서로다른 배열을 하나의 문자열로 만들 떄 중간에 들어갈 문자열을 인자로 넣는다.


21. some()
=> 순회를 돌면서 조건을 만족하는 값이 하나라도 존재하면 true를 반환한다.


22. every()
=> 순회를 돌면서 조건을 모두 만족해야 true를 반환한다. 하나라도 조건을 만족하지 않으면 false를 반환한다.


