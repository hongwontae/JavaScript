static 키워드는 정적 메서드(static method)나 정적 프로퍼티(ststic property)를 정의하기 위해 사용된다.
static으로 만들어진 메서드, 프로퍼티는 클래스의 인스턴스에서 호출될 수 없고, 클래스 자체에서 호출될 수 있습니다. 
=> static 키워드는 클래스 자체에서만 사용하는 프로퍼티를 만들 떄 사용하는 것이다.

constructor 프로퍼티는 자신을 참조하고 있는 생성자 함수를 가르킨다. 함수 객체가 생성될 때 이루어진다.
=> 인스턴스의 생성자 정보를 알아내는 수단이다.
=> 그렇기에 생성자 함수의 prototype에는 constructor 프로퍼티가 항상 존재한다. (줘야 하니까..)


Class를 통해서 만든 인스턴스는 Class의 prototype을 받는다. Class의 prototype에는 constructor와 메서드가 존재한다.
constructor는 인스턴스의 [[prototype]]에 넣고 이 인스턴스의 생성자가 누군인지 알려준다.
메서드도 인스턴스의 [[prototype]]에 들어간다.

class 내부에서 prototype으로 건네줄 메서드를 만드는 방법은 메서드를 작성할 떄 축약구문을 사용하는 것이다.
class 내부에서 constructor를 통해 메서드를 만들거나 올바른 함수식으로 메서드를 작성하면 prototype으로 가지 않고 
로 객체의 키-값으로 전해진다.

Class 내부의 Constructor는 prototype과는 관련이 없다. 바로 만들어지는 것이다.


prototype에 단순히 접근하여 인스턴스가 만들어질 떄 값을 주고 싶다면
obj.prototype.call = () => {console.log('good')}
