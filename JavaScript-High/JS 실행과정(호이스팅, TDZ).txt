1. JavaScript의 실행 과정
=> JavaScript는 코드를 실행하기 전에 두 단계로 처리합니다:

1-1. 컴파일 단계: 코드 전체를 스캔하여 변수와 함수 선언을 기록하고, 스코프를 설정합니다. (컴파일)
1-2. 실행 단계: 컴파일 단계에서 준비한 선언과 초기화를 기준으로 코드를 순차적으로 실행합니다. (런타임)
=> 이 과정에서 변수와 함수 선언이 컴파일 단계에서 미리 등록되기 때문에, 선언 전에 참조할 수 있게 됩니다.
=> 즉, 컴파일 과정에서 호이스팅됩니다.
=> 호이스팅이 된다는 것은 변수와 함수 선언 등이 메모리에 등록되는 것입니다.


2. 호이스팅이란?
=> 컴파일 단계에서 선언을 스코프 최상단으로 끌어올리는 매커니즘입니다.
=> var로 선언한 변수를 선언 전에 호출하면 ReferenceError가 아닌 undefined가 반환됩니다.
=> let, const는 선언전에 접근하면 TDZ 상태에 존재하기 떄문에 ReferenceError가 던져집니다.
=> 함수 선언문은 선언전에 접근하여 호출할 수 있지만 함수 표현식은 ReferenceError가 던져집니다. (TDZ)
=> Class 선언 전에 접근하면 ReferenceError가 던져집니다. (TDZ)


3. 호이스팅에 발생하는 이유
=> JavaScript 엔진이 효율적으로 스코프를 구성하고 코드를 실행하기 위해 사용하는 동작


4. TDZ(일시적 사각지대)
=> JavaScript에서 **let, const, class**로 선언된 변수가 초기화되기 전까지 접근할 수 없는 상태를 의미합니다.
=> 해당 변수가 선언된 위치 이전에서는 접근이 불가능하게 만들어 주는 메커니즘입니다.
=> TDZ 상태에서는 변수를 참조하면 **ReferenceError**가 발생합니다. 
=> 즉, 메모리는 할당되었지만 값을 할당되지 않은 상태입니다.
(메모리만 할당하고 값을 가지지 않을 수 있습니다.)
(TDZ 상태에 존재한다면 런타임에 초기화하여 값을 가질 수 있습니다.)


