1. Switch Case (control-12-switch-case)
switch case 구문은 간단히 말해서 case별로 다른 코드를 실행해야 할 때 사용한다. (if else와 비슷하다.)/ 일치하는 값을 대상으로 if문을 작성할 떄 용이하다.

fall through가 기본 동작이다. 하나의 case가 실행된 후 다른 case도 실행한다는 의미이다. 이를 방지하기 위해서 하나의 case 구문 제일 밑에 break;를 작성하면 된다. 이렇게 작성하면 하나의 case문이 일치하면 다른 case문은 무시하라는 뜻이 된다.

default 키워드는 일치하는 case가 하나도 없을 때 default 안의 코드를 실행하라는 키워드이다.

ex) switch (ev) {
    case LOG_EVENT_PLAYER_ATTACK:
      logEntry.target = 'MONSTER';
      break;
    case LOG_EVENT_PLAYER_STRONG_ATTACK:
      logEntry = {
        event: ev,
        value: val,
        target: 'MONSTER',
        finalMonsterHealth: monsterHealth,
        finalPlayerHealth: playerHealth
      };
=> switch(가져온 매개변수)
   case 사용자가 비교할 값 : 일치하면 실행할 코드 (다음에 실행할 코드를 적어야 된다.)
     break; 일치하면 실행하고 끝내라
     default : 일치하지 않으면 실행할 코드



2. 반복문
For/ For-Of-Loop/ For-In-Loop/ While Loop

for-Of => 배열을 반복한다.
ex) for(const el of array){console.log(el)}

for-in => 객체의 모든 키를 출력한다.
ex) for(const key in obj){console.log(key); consoel.log(obj[key]);}

while-loop => 조건이 충족되는 경우 출력하고 그렇지 않으면 멈춘다.


3. For
for(let i=1; i<3; i++){반복할 코드}/ 배열.length => 배열의 개수
마지막의 조건인 i++의 경우 {반복할 코드}가 끝난뒤 설정된다.


4. For-Of
for(const i=0; 설정할 이름; 실제 배열){console.log(설정할 이름)} => 모든 배열의 항목들이 인덱스의 순서에 맞춰 출력된다. of의 초기값이 const인 이유는 배열의 모든 출력값은 반복할 떄마다 다시 생성된다. let은 재할당으로 바꿔주는 것이고 const는 재할당이 안된다. 재할당이 아닌 다시 생성이기에 const를 사용


5. For-In
for(const key in logEntry){console.log(key+' => '+ logEntry[key])}
=> 객체의 키와 값을 불러오는 로직이다. for-in은 모든 키에 순차적으로 접근하여 출력한다.


6. 중첩반복문
내부의 반복문 전체를 실행하면 외부 반복문을 실행한다.


7. while/ do-while
while을 사용할 때는 반복문이 언제 끝날지 모를 때 사용하는 것이 좋다. 조건이 false면 그만두는 로직이기 때문이다.


8. Break
fall-through를 피하기 위해서 switch-case에서 사용했다.
break를 통해 반복문을 막아줄 수 있다.


9. countine
현재 실행중인 코드를 중단시키지만 전체 반목문을 중단시키지는 않는다. 대신 다음 반복문으로 넘어간다.
for문 안에서 continue는 모든 내부 코드가 실행된 후에 continue를 호출한다.


10. 레이블 구문
반복문과 함께 사용한다. 

ex) let j = 0;
  outerWhile: do {
    console.log('Outer', j);
    innerFor: for (let k = 0; k < 5; k++) {
      if (k === 3) {
        break outerWhile;
        // continue outerWhile; // dangerous! => Infinite loop!
      }
      console.log('Inner', k);
    }
    j++;
  } while (j < 3);
=> 반복문 바로 앞에 이름을 준다. 이름은 아무것이나 상관없다. 해당 이름을 break나 continue의 뒤에 두면 작동한다. 예제의 break경우 본래라면 3에서 멈추고 외부 반복문이 실행되지만 레이블 구문의 break는 3에 도달했을 때 외부반복문도 같이 끝내버린다.


11. Try-Catch
코드를 실행시키는데 오류가 발생할 수 있다. (여기서 말하는 오류란 개발자의 코드 문법이나 실수 오류를 뜻하는 것이 아니라 서버통신의 오류, 인풋 태그의 입력값 받아오는 에러 등을 말한다.) 이 잠재적인 오류들이 발생했을 때 어떻게 처리할 것인지 정하는 구문이 try-catch이다.

throw {message : '~~'} => 에러가 발생했을 떄 콘솔창에 보여주는 메시지

Try-catch를 전체 JS코드를 랩핑하면 성능의 저하와 유효한 에러 메시지를 받을 수 없다. 

ex) try{
  chosenMaxLife = getMaxLifeValues();
} catch (error){
 console.log(error);
 chosenMaxLife = 100;
}
=> try 구문의 에러가 발생해서 실행되지 않았을 떄 catch 구문이 실행된다. catch구문은 어떤 오류인지를 매개변수로 받고 console로 출력하고 실패했을 떄의 코드를 실행한다.

try-catch-finally => finally는 오류가 있든 없든 실행한다. finally는 클린업 함수를 작동시킬 떄 많이 사용한다.

ex) try{} catch(){} finally{}

































     