6. 잘 알려진 내보내기 구문 변형 더 보기
export 키워드는 함수, 클래스, 상수, 변수 등 모든 항목에 대해 사용될 수 있다.
import 또한 export된 함수, 클래스, 상수, 변수 등 모든 항목을 가져올 수 있다.

import * as 변수명 from "export 파일 주소.확장자";
=> export된 모든 항목들을 가져온다.

import {가져올 expoet 구문 as 별칭} from "export 파일 주소.확장자"
=> 별칭을 사용할 수 있다.


7. 기본 내보내기로 작업하기
export default class(변수,상수,함수)를 사용할 수 있다.
=> 기본 내보내기라고 한다.

import 할 때는 import 변수명 from "파일주소.확장자";
=> 기본 내보내기한 항목을 가져온다.

파일 마다 하나의 default 키워드만 가능하다.


8. 동적 임포트 & 코드 분할
HTML 파일이 로드 => app.css, app.js 파일을 요청하여 로드 => app.js가 projectList를 요청하여 로드.. 이런식으로 코드가 작동한다. 이는 HTTP 요청으로 이루어진다.
=> 이렇게 만든 코드들은 성능의 저하가 존재한다. 요청과 응답하는 통신이 많아지면 네트워크 지연 시간, 브라우저 시동시간처럼 줄일 수 없는 시간이 발생한다.

Tooltip은 이벤트 리스너의 효과를 담당하는 class로 해당 파일이 바로 로드될 필요는 없다.
=> 이러한 것들을 처음 렌더링 상에서 치우고 필요할 떄 부른다면 페이지 로드 속도를 향상시킬 수 있다.

동적 가져오기 구문
export가 필요한 함수나 구문 안에서 브라우저 내장 함수인 import()을 사용한다.
import는 Promise 기반 함수이다. async/await 사용가능하다.

ex) import(주소.확장자).then(module => {
  export 항목으로 Logic을 작성한다.
}) => export ToolTip이 module의 프로퍼티가 되는 것이다. 
=> 이렇게 사용하면 export가 필요한 시점에 파일을 다운로드하여 가져와서 사용한다.

네트워크를 보면 처음 로드될 떄는 import()내의 자원을 가져오지 않는다. 해당 import()가 트리거 될 떄 네트워크에 파일이 로드되어서 작동한다.


9. 모듈 코드는 언제 실행되는가?
모듈 => 분리된 파일을 각각 모듈이라고 부른다.
모듈에서 내보내지 않은 코드 => 처음에만 실행된다.
이 후 필요한 모듈 코드만 실행한다. => 이미 로드되어 있기 때문에 전체 실행할 필요없다.


10. 모듈 스코프 & globalThis
모듈은 처음부터 엄격모드이기 떄문에 this로 window에 접근할 수 없다.
모듈은 자신만의 스코프를 가진다. import export 논리를 통해서..
import와 export는 가장 위로 올라간다. => 호이스팅

최상위 모듈에서 window.default_value = 'MAX'를 설정하면 하위 모듈에서 window.default_value를 가져올 수 있다.

globalThis 
=> 모듈에서 사용하며 this를 대신하여 사용된다. 전역 객체를 가르킨다.
=> window.default_value === globalThis.default_value;
그냥 this를 사용하면 window를 가르킨다. => real this 대체/ 엄격모드 this는 window를 가르키지 않는다.

=> 데이터 export, import가 모종의 이유로 사용하기 힘들 떄 데이터 공유를 위해 사용된다.


** 브라우저가 JS를 만나게 되면 코드를 실행한다. => 호출이 아니라면 등록한다.















