1. 솔루션 : 코드 트랜스파일링
JS 최신 문법 (let, const, arrowFunc..)를 지원하지 않는 브라우저의 어플리케이션을 만들 떄 JS 최신 문법을 사용해서 만들고 배포하고 싶다면 트랜스파일링을 이용해야 한다.

트랜스파일링 => 최신코드를 구형 코드로 변환하는 것을 의미한다. 이 떄 Babel이라는 도구를 사용한다.

babel 이용법
npm install --save-dev babel-loader @babel/core @babel/preset-env (--save-dev === -D)
babel-loader => 웹팩에 통합되어 Webpack과 Babel의 도구를 연결하는 역할을 한다.
@babel/core => 최신 코드를 구형 코드로 옮기는 방법을 알고 있는 도구이다.
@babel/preset-env => 어떤 기능이 컴파일링 되는지를 제어하는 사전 설정이다.

webpack.config.js/ webpack.config.prod.js에 밑의 코드를 추가한다. 웹팩에게 트랜스파일링할 파일 설정을 알려주는 것이다.
module: {
  rules: [
    {
      test: /\.(?:js|mjs|cjs)$/,
      exclude: /node_modules/,
      use: {
        loader: 'babel-loader',
        options: {
          presets: [
            ['@babel/preset-env', { targets: "defaults" }]
          ]
        }
      }
    }
  ]
}


이 후 package.json에서 "browserslist": "..."를 작성하면 Babel이 pack.json의 broweserslist 값을 보고 어떤 브라우저를 기준으로 트랜스파일링 할지 결정한다. 값에 들어가는 값은 공식문서에 문법을 살펴보면 된다.

이 후 npm run build를 사용하면 트랜스파일링이 웹팩화되어 반환된다.


2. 개선 : 폴리필 자동 감지 + 추가
만약 트랜스파일링을 이용해서 구형 브라우저 어플리케이션을 만들었는데 한 가지의 JS 문법을 쓰지 못한다면 폴리필을 사용하는 것이 좋다. => 다 바꾸는 것보다 좋다.

폴리필은 기본적으로는 수동적으로 사용하지만 Babel과 함께 이용하면 자동으로 사용된다.

core.js는 폴리필의 집합이다. 다수의 폴리필들이 내장된 거대한 패키지이다.
=> 모든 브라우저에서 작동하는 JS 기능을 사용할 수 있다. 
하지만 core.js는 용량이 크기 때문에 전체적으로 사용하는 것은 비효율적이다.
=> import 'core.js'를 하면 웹페이지를 로드할 떄 다운받아야 하는 js 파일의 용량이 커진다.
떄문에 import 'core.js/features/promise' 같이 필요한 부분만 가져오는 것이 효율적이다.

webpack.config.js의 presets를 수정해서 자동으로 폴리필이 적용되도록 설정한다.
preset : [
 presets : ['@babel/preset-env',{useBuiltIns : 'usage'}]
]

presets의 배열 안의 객체의 useBuiltsIns의 기본값은 false이다. => 폴리필을 가져오지 않는다.
presets의 useBuiltIns의 usage는 웹팩을 구성할 떄 구형 브라우저에서 사용되지 못하는 기능을 파악한 후에 폴리필을 자동으로 가져온다.
presets의 useBuiltIns의 entry는 최상단에 core.js를 import하고 웹팩이 구성될 떄 필요한 폴리필을 찾아 import한다. usage와 구분되는 점은 browserslist를 보고 현재 코드가 구형 브라우저에서 돌아가게 할 변환 폴리필을 모조리 추가한다는 것이다.

=> npm run build : prod를 실행하면 scripts에 개발 파일이 설치되어 실행된다.


3. JS 파일 외의 브라우저 지원
JS의 기능을 지원하지 않는 웹 페이지를 고려해서 폴백코드를 구성하는 것이 필요하다.




 



































