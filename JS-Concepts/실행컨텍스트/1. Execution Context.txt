1. 실행 컨텍스트란?
=> JS 엔진이 코드를 실행할 떄 현재 실행중인 코드에 대한 정보를 담고 있는 객체이다.


2. 실행 컨텍스트 구성요소
2-1. 변수 환경
=> var 변수, 함수 선언문 등을 저장합니다.

2-2. 렉시컬 환경
=> 코드가 선언된 위치를 기준으로 변수나 함수가 어디서 접근 가능한지를 정의하는 구조입니다.
=> 렉시컬 환경에는 환경 레코드, 외부 렉시컬 환경 참조 2가지가 존재합니다.
1. 환경 레코드
=> var, let, const로 정의된 변수를 가지고 있습니다.
** 렉시컬 환경과 변수 환경은 크게 다른 개념이 아니라 렉시컬 환경이 변수 환경을 포함하고 있다고 생각하면 됩니다. **
2. 외부 렉시컬 환경 참조
=> 현재 스코프 바로 바깥 렉시컬 환경에 대한 참조입니다.
=> 스코프 체인에서 다음 링크를 의미합니다.
**변수나 식별자를 찾을 떄 현재 렉시컬 환경에 없다면 외부 렉시컬 환경 참조를 올라가서 찾습니다. 이를 스코프 체인이라고 합니다.**

2-3. this 바인딩
=> 현재 실행 중인 함수나 전역에서의 this가 무엇인지 저장합니다.


3. 실행 컨텍스트 생성 과정
=> 처음에 실행 컨텍스트를 생성합니다. 그 다음 3-1, 3-2를 실행합니다.
3-1. 생성 단계
1. 변수, 함수, 스코프 정보, this 등을 먼저 설정합니다.
2. var undefined로 초기화, let/const는 TDZ, 함수는 전체 함수가 메모리에 올라갑니다.
3. 생성 단계에서는 var, 함수선언문은 초기화되고 let/const TDZ에 놓이는 호이스팅이 이 떄 실행됩니다.

3-2. 실행단계
1. 코드가 한 줄씩 실행됩니다.
2. 이 떄 실제 값이 할당되거나 함수 호출등을 수행합니다.
** 생성 단계와 실행 단계를 거치면서 실행 컨텍스트의 구성요소가 채워집니다.


4. 실행 컨텍스트 순서
4-1. JS 파일 실행
4-2. Global 실행 컨텍스트 생성
=> 생성단계와 실행단계를 실행합니다.
=> 전역 실행 컨텍스트 구성요소를 가지게 되고 다른 컨텍스트와 다르게 다른 컨텍스트에서 
 전역 컨텍스트를 언제 어디서나 접근할 수 있습니다.
4-3. 이후 처음부터 코드를 실행하면서 초기화하고 함수를 실행하면서 컨텍스트를 실행하고 pop합니다.

