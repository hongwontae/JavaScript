1. 형 변환
정의 : 기존의 자료형이 다른 자료형으로 바뀌는 것을 의미한다.


특징
1-1. String으로 형변환 : null => "null", false => "false" 처럼 예측 가능하게 변환한다.

1-2. Number로 형변환
undefinded => NaN, null => 0, true => 1, false => 0
string의 경우 공백을 제외했을 떄 숫자형태를 갖추면 그대로 가져가고 아니면 NaN

1-3. Boolean으로 형변환 : 0 => false, null => false, undefinded => false, 1이상 => true, String => 1

1-4. 형변환은 암시적 형변환과 명시적 형변환으로 나뉜다.


2. 연산자
정의 : JS에서 사용하는 연산자

특징
2-1. 피연산자 : 연산 대상
2-2. 단항 연산자 : 피연산자가 하나일 경우
2-3. 이항 연산자 : 피연산자가 두 개일 경우
2-4. + 기능
피연산자 중 string이 존재하면 계산을 하지 않고 문자열로 합친다. but 다른 연산자(-,/)는 숫자형으로 반환한 뒤 계산한다.
+가 단항 연산자로 사용되면 숫자형으로 명시적 형변환을 일으킨다.
2-5. 단항 연산자 > 이항 연산자
2-6. 복합 할당 연산자 : let a =10; a+=10 => a=20
2-7. 증가/감소 연산자 : ++/-- 1을 증가하거나 minus한다.
    전위형과 후위형이 존재한다. 전위형은 즉시 적용, 후위형은 증감 연산자가 할당되고나서 사용될 떄 할당



3. 논리 연산자
정의 : boolean 값을 반환하거나 truthy나 falsy 값을 반환한다.

특징
3-1. ||(or)
두 개 중 하나라도 true라면 true을 반환한다.
참인 것을 고른다./ 첫 번쨰 truthy 값을 고른다./ 모두가 falsy일 떄는 마지막 falsy를 고른다.
3-2. && (and)
두 개 중 모두가 참이어여 true을 반환한다.
false를 고른다./ 첫 번쨰 falsy 값을 찾는다./ 모두가 truthy라면 마지막 truthy을 고른다.
3-3. ! (not)
부정 연산자


4. nillish 병합 연산자 ??
정의 : 피연산자들 중에 값이 할당되어 있는 변수를 찾는다.

특징
4-1. ex) let a = b ?? c
b가 null이거나 undefinded면 c/ 그렇지 않으면 b
4-2. ??는 연산자 우선순위가 낮기 떄문에 괄호를 사용하는 것이 좋다.



