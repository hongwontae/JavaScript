1. 배열
let a = [] or let a = new Array()로 생성가능
=> [] 표기법으로 접근한다.

push-unshift/ pop-shift

for-of => 배열 데이터 접근 가능

length 프로퍼티 사용가능


2. 배열 메서드
2-1. splice(1,2,3)
1 => 조작을 가할 첫 번째 요소를 가리키는 인덱스(index);
2 => deleteCount로, 제거하고자 하는 요소의 개수
3 => 배열에 추가할 요소

2-2. slice(1,2)
1인덱스, 2 length 만큼 새로운 배열로 반환

2-3. forEach()
=> array의 for 향상문

2-4. indexOf, lastIndexOf, includes 
=> 배열의 인덱스를 통해 요소를 얻거나 boolean값을 얻는다.


2-5. find/findIndex
find((item, idx, arr)=>{
    return ...
}) 
=> 함수가 참을 반환하면 탐색을 중단하고 해당 요소를 반환한다.
=> findIndex는 find와 같지만 인덱스를 반환한다.

2-6. filter
=> find와 다르게 모든 요소를 순회하고 옳은 것을 반환한다.

2-7. map
=> 배열 요소 전체를 순회하고 결과를 반환
=> 대중성 제일 높은 함수

2-8. reduce()
reduce((accumulator, item, index, array)=>{

}, initial)
accumulator => 이전 함수 호출의 결과. initial은 함수 최초 호출 시 사용되는 초깃값을 나타냄(옵션)
item => 현재 배열 요소
index => 요소의 위치
array => 배열 

2-9. Array.isArray()
=> 배열인지 아닌지 boolean으로 반환하는 메서드

2-10. map, filtes는 함수들의 반환값은 무조건 배열이다. 또한 모든 요소를 순회하는 로직을 갖고 있다.


3. Object.keys, values, entries
3-1. Object.keys(obj) – 객체의 키만 담은 배열을 반환합니다.
3-2. Object.values(obj) – 객체의 값만 담은 배열을 반환합니다.
3-3. Object.entries(obj) – [키, 값] 쌍을 담은 배열을 반환합니다.