1. Iterable 객체

Iterable(반복 가능한)객체는 배열을 일반화한 객체를 의미한다. 
이터라블의 개념을 사용하면 어떤 객체든 for-of 반복문을 적용할 수 있다.

Iterable => array, string, map, set...

Iterble한 객체를 만들려면(for-of) 객체에 Symbol.iterable이라는 메서드를 추가해야 한다.

1. for..of가 시작되자마자 for..of는 Symbol.iterator를 호출한다. (Symbol.iterator가 없으면 에러가 발생합니다). Symbol.iterator는 반드시 이터레이터(iterator, 메서드 next가 있는 객체)를 반환해야 한다.
2. 이후 for..of는 반환된 객체(이터레이터)만을 대상으로 동작한다.
3. for..of에 다음 값이 필요하면, for..of는 이터레이터의 next()메서드를 호출한다.
4. next()의 반환 값은 {done: Boolean, value: any}와 같은 형태이어야 한다. done=true는 반복이 종료되었음을 의미합니다. done=false일땐 value에 다음 값이 저장됩니다.


이터러블은 Symbol.iterator가 구현된 객체이다.
유사배열은 인덱스와 length 프로퍼티가 있어서 배열처럼 보이는 객체이다.
string => 이터러블이면서 유사배열객체이다.

Array.from() => 이터러블이나 유사배열객체를 받아서 진짜 배열로 만들어준다.


2. 맵과 셋

Map
맵은 키-값을 저장한다. 다만 키에 다양한 자료형을 사용하여 만들 수 있다. (키타입의 제약은 없다.)
맵은 순서를 기억한다.

new Map() – 맵을 만든다.
map.set(key, value) – key를 이용해 value를 저장한다.
map.get(key) – key에 해당하는 값을 반환한다. key가 존재하지 않으면 undefined를 반환한다.
map.has(key) – key가 존재하면 true, 존재하지 않으면 false를 반환한다.
map.delete(key) – key에 해당하는 값을 삭제한다.
map.clear() – 맵 안의 모든 요소를 제거한다.
map.size – 요소의 개수를 반환합니다.

맵의 중요한 기능 중 하나는 키에 객체를 사용할 수 있다는 점이다.

map.set().set().set() => 이렇게 체이닝을 하여 값을 넣을 수 있다.


맵 요소 반복하기
map.keys() – 각 요소의 키를 모은 반복 가능한(iterable, 이터러블) 객체를 반환한다.(Symbol.iterable)
(iterable 객체가 존재하기 때문에 for-of를 사용가능하고 키를 반환한다.)

map.values() – 각 요소의 값을 모은 이터러블 객체를 반환합니다.(Symbol.iterable)
(iterable 객체가 존재하기 때문에 for-of를 사용가능하고 값을 반환한다.)

map.entries() – 요소의 [키, 값]을 한 쌍으로 하는 이터러블 객체를 반환합니다. 이 이터러블 객체는 for..of반복문의 기초로 쓰입니다.(Symbol.iterable)
(iterable 객체 존재, [키-값]이 한 요소인 map-iterator임으로 배열을 반환한다.)

map은 forEach도 지원한다.


Object.entries() => 이 메서드는 객체의 키-값 쌍을 요소로 가지는 배열을 반환한다. 인자에 객체를 넣으면 배열로 바꿔준다. 이 후 그 배열을 new Map()의 인자로 넣어주면 map이 반환된다.
(일반적인 객체는 Symbol.iterable이 존재하지 않기 떄문에 바로 만들 수 없다.) 

Object.fromEntries() => 이 메서드는 각 요소가 [키-값] 쌍인 배열을 객체로 바꿔준다. 인자로 iteable 객체를 받는다. 인자의 값은 배열로 감싸줘있는 배열이어야 한다.



























