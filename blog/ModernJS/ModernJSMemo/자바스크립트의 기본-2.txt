1. 형변환

함수와 연산자에 전달되는 값은 대부분 적절한 자료형으로 자동 변환된다. 
=> 형변환

명시적 형 변환 => String(), Number(), Boolean()... 인자에 변수나 값을 주어서 형 변환을 한다.

Primitive Type => PrimitiveType
alert() => 문자열을 인자로 받는다. 
ex) alert(true) => 'true'로 형변환되어 브라우저와 상호작용한다.


1. Number나 Boolean, null, undefined.....들을  string로 형변환하는 경우 문자 그대로 string이 된다.
=> let a = true; a = String(a); console.log(a) => 'true';

2. String이나 Boolean, null, undefined.....들을 Number로 형변환하는 경우
true => 1;
false => 0;
undefined => NaN
null => 0;
stirng => 문자로만 이루어져 있다면 NaN, 문자+숫자도 NaN, 중간공백이 있는 숫자 문자열 NaN, 앞뒤 공백이 존재하는 숫자 문자열 그대로 숫자로 변환한다.


3. Number, String, nullm undefined.... 들을 Boolean으로 형변환하는 경우
0 => false;
null => false;
undefined => false;
"" => false
그 외 대부분 true이다.



2. 기본 연산자와 수학

피연산자 : 연산자가 연산을 수행하는 대상을 의미한다.
단항 연산자 : 피연산자를 하나만 받는 연산자를 일컫는 말이다. ex) i++;
이항 연산자 : 두 개의 피연산자를 받는 연산자를 일컫는 말이다. ex) 1+2;


% => 나머지 연산자
** => 거듭제곱 연산자


String +;
이항 연산자 +를 사용했을 떄 피연산자 중 하나가 문자열이면 다른 하나도 문자열로 변환되어 결합된다.
string -,/,%..들은 계산을 할 떄 숫자가 아니면 형변환을 한 후에 계산을 한다.


단항 연산자 +와 숫자형으로 변환
=> +1, 아무런 효과 없다. but +true => 1이 된다. 단항 연산자 +가 형변환의 역할을 해주는 것이다.
=> 단항 연산자 +를 사용하면 숫자형이 아닌 피연산자는 숫자형으로 변환된다.
ex) let apple ='10'; let water = '20';
    console.log(apple+water)=>1020;
    console.log(+apple + +water) => 30;
단항 +,-기호는 연산자 우선순위가 덧셈연산자보다 높다.


복합 할당 연산자
=> +=, *=/ a=a+5 === a+=5 
복합 할당 연산자는 할당 연산자와 우선순위가 동일하다. => 대부분의 연산 실행 이후에 복합 할당 연산자가 실행된다.


증가, 감소 연산자
++, --
=> 증감연산자가 앞에 붙어 있으면 전위형, 뒤에 있으면 후위형이라고 부른다.
=> 전위형은 반환값이 바로 반영된다. 후위형은 반환값이 증감 연산전의 반환값이 반환된다. 다만 계산을 된 것이다.



3. 비교 연산자

비교 연산자는 Boolean을 반환한다. 비교연산자를 통해 값을 할당 할 수 있다.

문자열을 비교할 때는 유니코드로 변환해서 비교한다.
비교하려는 값의 자료형이 다르다면 이 값들을 숫자로 치환하여 비교한다.

== : 동등연산자/ === : 일치 연산자


Null과 undefined 비교
Null == undefined => true/ Null === undefined => false
동등연산자일 때는 피연산자가 null이나 undefined일 떄는 형 변환을 하지 않는다. undefined나 null을 null로 비교했을 때만 형변환을 실시하여 연산한다.

console.log('2'>'12') => true, 유니코드상 '2'가 더 높기 떄문이다.



4. truthy/ false
0,"",Null, undefined, NaN => false로 평가한다. => falsy
그 외 나머지 => truthy


feat. 삼항 연산자
조건 ? value1 : value2 => 조건이 true라면 value1이고 그렇지 않으면 value2이다.
value2가 조건일 떄는 else if가 된다고 생각하면 된다.

할당가능하다.


5. 논리연산자
||, &&, !

|| 
=> 하나라도 옳다면 true를 반환하다.

=> 모두 truthy값이라면 첫 번쨰 값을 반환한다. (or조건이기 때문에 하나라도 ture라면 볼 필요도 없다.)
=> 모두 falsy값이라면 마지막 값을 반환한다. (or조건이기 때문에 false가 여러개라도 하나만 true면 true임으로 끝까지 찾는다. => 마지막 값이 반환된다.)
=> falsy와 truthy값이 섞여 있다면 첫 번쨰 truthy값이 반환된다.

&&
=> 모두 옳아야 true를 반환한다.

=> 모두 truth값이라면 마지막 값을 반환한다. (and 조건이기 떄문에 하나라도 false면 false 그럼으로 끝까지 확인한다. => 마지막 값 반환)
=> 모두 falsy값이라면 첫 번쨰 값을 반환하다. (and 조건이기 때문에 하나라도 false면 false이다. false 나오면 거기서 실행 멈추고 반환함으로 첫 번쨰 값을 반환한다.)
=> falsy와 truthy값이 섞여 있다면 첫 번쨰 falsy값이 반환된다. => 첫 번쨰 flase값이 and조건을 결정지어서..
=> &&는 ||보다 연산순위가 높다.


!
=> 논리 부정 연산자는 and나 or보다 우선순위가 높다.
=> true를 flase로 false를 true로 변환한다.
=> 형변환할 떄 유용하게 사용된다. !"ko" => flase/ !!"koala3121" => true;


feat. ??
?? => 왼쪽 피연산자가 null이나 undefined면 오른쪽 피연산자의 값을 대입한다.

?? 연산자의 우선순위는 대다수의 연산자의 순위보다 낮음으로 ()를 사용하여 처리한다.
괄호없이 ??를 ||, &&같이 사용하는 것은 오류가 발생할 확률이 높다.



























































































