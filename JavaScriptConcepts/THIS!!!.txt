this가 하는 일 => 자신이 속한 객체, 자신이 생성한 인스턴스를 가르키는 식별자이다.
바인딩 => 식별자와 값을 연결하는 과정
JS에서 this는 런타임에 결정이된다.

대표적으로 this에 바인딩되는 값
1. 전역 공간의 this : 전역 객체

2. 메소드 호출 시 메소드 내부의 this : 해당 메소드를 호출한 객체

3. 함수 호출 시 함수 내부의 this : 지정되지 않음 (this가 지정되지 않은 경우, this는 자동으로 전역 객체를 바라보기 때문에 함수를 호출하면 함수 내부에서의 this는 전역 객체가 된다)

4. 화살표 함수에서 this를 사용하면 상위 스코프로 올라가면서 this를 찾는다.
=> 객체의 메서드에 화살표 함수를 사용하면 안되는 이유이다. 
=> 화살표 함수의 this는 중첩함수 안에 있다면 스코프 체인 상에서 가장 가까운 상위 함수 중, 화살표 함수가 아닌 함수의 this를 참조하게 된다.

5. addEventListener의 콜백함수에서는 this에 해당 이벤트 리스너가 호출된 엘리먼트가 바인딩되도록 정의되어 있습니다. 
ex) button.addEventListener('click', function() {
   console.log(this);	// button 엘리먼트
   this.innerHTML = 'clicked';
});

6. constructor의 this는 클래스가 생성할 인스턴스 객체를 가르킨다. 




메서드와 this
메서드에 사용된 this는 메서드를 호출한 객체로 바인딩됩니다. 즉, 현재 객체를 나타냅니다.
객체에 함수를 할당하지 않고 그냥 호출했다면 this는 전역 객체를 가리킨다.

ex) const a = {k : 'hwt', k1 : function(){console.log(this)}}
a.k1();
=> 이렇게 사용하면 this는 a전체를 가르킨다.

화살표 함수에 this를 사용하면 메서드를 호출한 객체가 아닌 화살표 함수 외부의 this를 참조한다.

ex) let obj = {
  strValue: 'Hello',
  normalFunc: function() {
    let arrowFunc = () => { console.log(this) }
    arrowFunc();
  }
}

obj.normalFunc();
=> arrowFunc의 스코프를 벗어나서 strValue,normalFunc이 있는 스코프로 가서 그것들을 참조한다.


생성자 함수와 this

JavaScript 엔진은 함수 앞에 new 연산자가 존재하는 경우 다음과 같은 동작을 수행합니다.
1. 생성자 함수가 실행되기 전에 빈 객체가 생성됩니다.

2. 1번 과정에서 생성된 빈 객체가 생성자 함수의 this로 바인딩됩니다. 즉, this는 빈 객체를 가리킵니다.

3.  this로 접근하는 프로퍼티와 메서드는 빈 객체에 생성합니다.

4. JavaScript 엔진은 빈 객체의 프로토타입을 생성자 함수의 프로토타입으로 설정합니다.

5. 생성자 함수에 return문이 존재하지 않은 경우 JavaScript 엔진은 1~4번 동작을 수행한 객체를 반환합니다.



함수와 this

메서드 내부의 함수의 this
객체의 프로퍼티가 아니므로 일반 함수로 취급됩니다.
점 표기법 또는 대괄호 표기법 없이 호출되었으므로 일반 함수로 취급됩니다.
메서드의 내부 함수는 일반 함수이므로 내부 함수의 this는 전역 객체로 바인딩됩니다.


클래스 내부에서 사용하는 this는 클래스 내부 전체를 가르킨다.
this는 원래 상위 객체를 참조한다. => 클래스 내의 상위 객체는 class 안이다.
클래스 내의 만들어진 객체나 메서드를 클래스 내부에서 사용할 경우 this.를 사용해야 제대로 찾는다.


















