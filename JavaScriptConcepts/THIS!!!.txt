this가 하는 일 => 자신이 속한 객체, 자신이 생성한 인스턴스를 가르키는 식별자이다.
바인딩 => 식별자와 값을 연결하는 과정
JS에서 this는 런타임에 결정이된다.

대표적으로 this에 바인딩되는 값
1. 전역 공간의 this : 전역 객체

2. 메소드 호출 시 메소드 내부의 this : 해당 메소드를 호출한 객체

3. 함수 호출 시 함수 내부의 this : 지정되지 않음 (this가 지정되지 않은 경우, this는 자동으로 전역 객체를 바라보기 때문에 함수를 호출하면 함수 내부에서의 this는 전역 객체가 된다)

4. 화살표 함수에서 this를 사용하면 상위 스코프로 올라가면서 this를 찾는다.
=> 객체의 메서드에 화살표 함수를 사용하면 안되는 이유이다. 
=> 화살표 함수의 this는 중첩함수 안에 있다면 스코프 체인 상에서 가장 가까운 상위 함수 중, 화살표 함수가 아닌 함수의 this를 참조하게 된다.

5. addEventListener의 콜백함수에서는 this에 해당 이벤트 리스너가 호출된 엘리먼트가 바인딩되도록 정의되어 있습니다. 
ex) button.addEventListener('click', function() {
   console.log(this);	// button 엘리먼트
   this.innerHTML = 'clicked';
});




메서드와 this
메서드에 사용된 this는 메서드를 호출한 객체로 바인딩됩니다. 즉, 현재 객체를 나타냅니다.
객체에 함수를 할당하지 않고 그냥 호출했다면 this는 전역 객체를 가리킨다.

ex) const a = {k : 'hwt', k1 : function(){console.log(this)}}
a.k1();
=> 이렇게 사용하면 this는 a전체를 가르킨다.

화살표 함수에 this를 사용하면 메서드를 호출한 객체가 아닌 화살표 함수 외부의 this를 참조한다.

ex) let obj = {
  strValue: 'Hello',
  normalFunc: function() {
    let arrowFunc = () => { console.log(this) }
    arrowFunc();
  }
}

obj.normalFunc();
=> arrowFunc의 스코프를 벗어나서 strValue,normalFunc이 있는 스코프로 가서 그것들을 참조한다.






















