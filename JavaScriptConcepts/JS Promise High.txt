Promise 객체값을 받는다는 것은 then()을 사용할 수 있다는 것이다.

Promise 객체를 then()으로 받을 떄 어떠한 일이 일어나는가?
then 함수 앞에서 프라미스를 리턴하는 경우에는 해당 프라미스가 resolved 된 값을 인자로 전달받는다

then()의 리턴값은 프라미스 객체거나 문자열도 가능하다.


함수의 return 값이 promise 객체이고 함수 호출이 올바르게 작동하여 then() 메서드를 실행했다면 Promise 객체의 state가 fulfilled가 되어서 promiseResult가 then()의 인자에 반환된다.

Promise 객체를 리턴하는 함수를 실행시키고 then()을 사용해서 받지 않으면 pending 상태가 유지된다.

const a = new Promise(excutor)
excutor는 new Promise가 실행될 떄 자동으로 실행된다.

변수에 new Promise를 통해 할당할 경우 바로 실행된다. => pending 상태로 기다린다. => a.then()을 사용한 순간 Promise는 그 결과가 resolve인지 reject인지 확인 후 resolve이면 PromiseResult를 반환하고 reject이면 error를 반환한다.

함수의 return 값이 Promise 객체라면 함수가 실행되기 전까지는 실행되지 않음으로 pending 상태도 아니다. 함수를 호출하는 순간 pending 상태가 되고 a().then()인 순간 resolve인지 reject인지를 확인하여 PromiseResult인지 error인지 확인하여 반환한다.

ex) const a = new Promise((resolve, reject)=>{
    setTimeout(() => {
        resolve('Done')
    },3000);
});

a.then(data => {
    console.log(data);
    return new Promise((resolve, reject)=>{
        resolve('Done')
    })
}).then(data => {
    console.log(data);
    return 'Moon Jae In'
}).then(data => {
    console.log(data);
})

=> 이렇게 then() 메서드는 일반 return 값을 줄 수도 있고 Promise 객체를 줄 수 도 있다.
=> then()이 Promise 객체라면 resolve나 reject한 값 둘 중 하나를 주는 것이다.

then()의 두 번쨰 인자나 catch를 통해서 예외처리를 할 수 있다.

















