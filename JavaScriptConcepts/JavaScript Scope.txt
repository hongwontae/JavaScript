스코프는 참조 대상 식별자(identifier, 변수, 함수의 이름과 같이 어떤 대상을 다른 대상과 구분하여 식별할 수 있는 유일한 이름)를 찾아내기 위한 규칙이다. 자바스크립트는 이 규칙대로 식별자를 찾는다.

ex) var x = 'global';

function foo () {
  var x = 'function scope';
  console.log(x);
}

foo(); // ?
console.log(x); // ?

=> 위 예제에서 전역에 선언된 변수 x는 어디에든 참조할 수 있다. 하지만 함수 foo 내에서 선언된 변수 x는 함수 foo 내부에서만 참조할 수 있고 함수 외부에서는 참조할 수 없다. 이러한 규칙을 스코프라고 한다.


JS에서 스코프는 2개이다.
1. 전역 스코프 (Global scope)
코드 어디에서든지 참조할 수 있다.

2. 지역 스코프 (Local scope or Function-level scope)
함수 코드 블록이 만든 스코프로 함수 자신과 하위 함수에서만 참조할 수 있다.

변수의 관점에서는 
1. 전역 변수 (Global variable)
전역에서 선언된 변수이며 어디에든 참조할 수 있다.

2. 지역 변수 (Local variable)
지역(함수) 내에서 선언된 변수이며 그 지역과 그 지역의 하부 지역에서만 참조할 수 있다.


전역 스코프
 var 키워드로 선언한 전역 변수는 전역 객체(Global Object) window의 프로퍼티이다.

비 블록 레벨 스코프
함수 밖에서서 사용한 var는 모두 전역 스코프를 갖게 된다. => if문이나 for문 등의 구문에서는 var는 전역변수로 취급된다. 그러나 let이나 const는 괄호에 둘려싸여 있으면 그 내부에서만 참조되고 외부에서는 참조될 수 없다.

함수 레벨 스코프
var/let/const는 모두 함수 레벨 스코프이다. 선언된 변수나 매개변수는 함수 외부에서 참조될 수 없다.
전역 변수와 지역변수의 변수명이 같으면 지역변수를 먼저 선택한다 var/let/const 모두 같다.
내부 함수에서 외부함수의 변수에 접근할 수 있다. => var/let/const 모두 같다.


렉시컬 스코프
렉시컬 스코프는 함수를 어디서 호출하는지가 아니라 어디에 선언하였는지에 따라 결정된다. 자바스크립트는 렉시컬 스코프를 따르므로 함수를 선언한 시점에 상위 스코프가 결정된다. 함수를 어디에서 호출하였는지는 스코프 결정에 아무런 의미를 주지 않는다.
























