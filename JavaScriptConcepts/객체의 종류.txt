1. 표준 빌트인 객체 === 네이티브 객체
ECMAScript 사양에 정의된 객체를 말하며, 애플리케이션 전역의 공통 기능을 제공한다. 자바스크립트 실행 환경(브라우저 또는 Node.js 환경)과 관계없이 언제나 사용할 수 있다. 표준 빌트인 객체는 전역 객체의 프로퍼티로서 제공된다.

생성자 함수 객체인 표준 빌트인 객체는 프로토타입 프로퍼티와 메서드, 정적메서드를 모두 물려받고 생성자 함수 객체가 아닌 표준 빌트인 객체(new가 없는 전역객체로써 사용되면) 정적 메서드만 제공한다.

빌트인 객체의 생성자는 각자의 .prototype을 가르킨다.

String(), Number()... => 형변환 역할만 한다.


2. 호스트 객체
ECMAScript 사양에 정의되어 있지 않지만 자바스크립트 실행 환경(브라우저 환경 또는 Node.js 환경)에서 추가로 제공하는 객체를 말한다. 브라우저 환경에서 DOM, BOM, Canvas, XMLHttpRequest, fetch, rquestAnimationFrame, SVG, Web Storage, Web Component, Web Worker와 같은 클라이언트 사이드 Web API를 호스트 객체로 제공하고, Node.js 환경에서는 Node.js 고유의 API를 호스트 객체로 제공한다.
=> Browser가 DOM를 만들고 JS코드에서 사용가능하다. 이를 호스트 객체라고 한다.
=> 이미 정의되어 있어서 new를 사용하지 않고 사용한다.


3. 사용자 정의 객체
표준 빌트인 객체나 호스트 객체가 아닌 사용자가 직접 정의한 객체를 의미한다.


4. 빌트인 전역 프로퍼티
전역객체의 프로퍼티이다. (NaN,Infinity)


5. 빌트인 전역 메서드
eval(), isFinite(NaN이나 infinity면 false 일반 수면 true), isNaN(NaN이면 ture 아니면 false)...등등


정적메서드 => 프로토타입이 아닌 함수 자체에 메서드를 설정하는 것을 의미한다.
window(전역객체)는 표준 빌트인 객체와 환경에 따른 호스트 객체 그리고 var 키워드로 선언한 전역변수와 전역 함수를 프로퍼티로 갖는다.
생성자 함수는 prototype에 constructor와 넘겨줄 프로퍼티가 존재한다. 생성자 함수로 인해 만들어진 객체는 constructor와 프로퍼티들을 받는다.


의문점
1. 표준 빌트인 객체에서 생성자 함수를 사용하며 만든 객체는 정적 프로퍼티, [[Prototype]]을 갖는다.
   근데 호스트 객체에서 new를 사용하여 만들면 (new document.createElement...) 아예 오류를 발생시킨다.
   => 살펴보니까 prototype이 존재하지 않는다. document 자체 메서드(정적 메서드)는 존재한다. 프로토타입이 없는데 new를 사용해서 오류가 나는 것일까?





















