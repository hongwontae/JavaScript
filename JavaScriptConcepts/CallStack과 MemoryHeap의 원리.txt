콜 스택
=> 함수가 호출되면 이 영역에 쌓이게 되면서 함수가 동작한다.(코드 실행 순서 관리를 수행한다.)
=> 원시 타입 데이터가 저장되는 곳이다.
=> 스코프 체인 및 this 관리

메모리 힙
=> 참조 타입 데이터가 저장되는 곳이다.
=> 메모리 할당이 일어나는 곳이다.


콜스택의 데이터 저장 구조 (let a = 10;)
원시타입은 콜 스택에 저장된다. 
식별자 자체 a는 콜스택 상의 실행 컨텍스트의 렉시컬 환경이라는 곳에 저장된다.
변수 a에는 10이 저장된 콜 스택의 메모리의 주소값이 저장된다.

힙 메모리의 데이터 저장 구조 (let b =[1,2];)
참조타입은 힙 메모리에 저장된다.
참조타입 데이터가 저장된 메모리 힙의 주소값은 콜스택에도 저장된다.
마찬가지로, 변수 식별자 b 자체는 콜스택 상의 '실행 컨텍스트(Execution Context)의 렉시컬 환경(Lexical Environment)'에 저장된다.


콜스택의 데이터 저장 구조의 원리

ex) let a = 10; let b = 20;
=> 원시타입의 데이터 값은 콜스택에 저장되고 데이터 값이 저장된 콜스택의 주소 값은 변수 a,b에 저장된다.
let a =10 => a | ee2344(콜 스택 주소값) | 10;

Case-1. 원시 타입 재할당1
ex) let a = 20;
=> 재할당하면 본인의 콜 스택 값을 변경하는 것이 아니라 기존에 20을 저장하고 있는 b의 주소를 가져와 주소를 변경한다. 콜스택 상의 a의 주소값과 b의 주소값이 같아지는 것이다.

Case-2. 원시 타입 재할당2
ex) let b = 30;
=> 콜 스택에 저장된 b의 값을 변경하는 것이 아니라 새로운 메모리를 확보하여 30을 저장하고 그 값의 주소를 b에 저장한다.

=> case1,2를 통해 쓸모없는 데이터들은 가비지 컬렉터에 의해 적절한 시점에 메모리에서 제거된다.


힙 메모리의 데이터 저장 구조의 원리\

ex) let arr = []; => 힙 메모리에서 일어나는 일은?

1. 변수의 고유 식별자를 생성한다. 
2. 콜 스택의 메모리에 주소를 할당한다. (런타임에 발생)
3. 힙에 할당된 메모리 주소를 콜스택의 값(value)으로 저장한다.(런타임에 할당된다.)
4. 힙의 메모리 주소에 할당된 값(빈 배열 [])을 저장한다.



















