자바스크립트는 싱글 쓰레드 언어이다.(한 번에 한가지 일만 처리한다. alert()을 생각하면 된다.)

자바스크립트를 실행시키기 위해서는 자바스크립트 엔진이 필요하다. (JS 엔진 => V8, Rhino,SpiderMonkey...)

JS의 V8엔진은 두 가지 구성요소로 구성된다. 하나는 Memory Heap이고, 다른 하나는 Call Stack이다.
메모리 힙은 메모리 할당이 발생하고, 콜 스택(호출 스택)은 코드 실행에 따라 스택이 하나씩 쌓이는 곳이다.

setTimeout()같은 함수는 자바스크립트 엔진에서 제공해주는 요소가 아니다. WebAPI라고 해서 자바스크립트 런타임에 브라우저가 지원해주는 것이다.


Call Stack은 기본적으로 자바스크립트를 한 줄씩 읽어가며 코드가 순서대로 돌 수 있도록 보장해주는 데이터 구조이다.
스택을 사용하기 때문에 후입 선출(LIFO, Last in-First-Out)의 구조이다.

ex) function multiply(x, y) {
    return x * y;
}
function printSquare(x) {
    var s = multiply(x, x);
    console.log(s);
}
printSquare(5); => 호출스택의 움직임에 관한 사진은 폴더에 존재한다.

스택을 초과하게 되면 (무한 로프를 돌리는 행위) Maximum call stack size 에러가 발생한다.
Call Stack은 정해진 스택 사이즈가 존재하고, 하나씩 쌓이기 때문에 정해진 용량을 초과하게 되면 에러가 발생하게 된다. 흔히들 이것을 Stack Overflow라고 말한다.

JS는 CallStack을 가지고 코드를 순차적으로 실행하기 떄문에 단일 쓰레드 형태를 가지며 한 번에 하나씩 처리한다.
(단일 쓰레드, 동기식 언어라고 한다.) 무한로프는 가능하지만 교착상태(DeadLock)은 없다.


JS의 비동기 처리 => 이벤트 루프와 Callback queue
JS는 비동기함수를 인식하여 이벤트 루프를 실행한다.

이벤트 루프라는 말은 Callback queue의 콜백을 실행시키기 위해서 호출 스택이 비워져 있는지 확인하고 비워져 있다면 호출스택으로 push하는 동작원리를 의미한다.

동기화는 시스템을 동시에 작동시키기 위해 여러 사건들을 조화시키는 것을 의미한다.















