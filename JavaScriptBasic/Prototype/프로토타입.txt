1. 자바스크립트는 프로토타입 기반 언어이다.
2. 함수나 배열도 객체이다. 

3. 생성자 함수
new를 사용하여 함수를 호출하면 객체가 생성되는 함수
function Person(name,age){
    this.name = name
    this.age = age
}

const hwt = new Person('hwt',20);
hwt = {name : 'hwt', age : 20}

3-1. new가 사용되면 빈 객체를 만들어 this에 할당한다. (this는 자신을 만든 객체를 가르킨다.) this={}
3-2. 함수 본문을 실행해 this를 수정한다. this = {name : 'hwt'...}
3-3. this를 반환한다. {name : 'hwt'...}

4. 생성자 함수를 통해 만들어진 객체는 함수객체가 가지는 프로토타입이라는 특수한 객체 프로퍼티를 통해 상속받는다.
ex) const data = [1,2,3] => const data = new Array(1,2,3) 같다.
ex) data는 Array 함수객체의 prototype 객체의 프로퍼티를 상속받는다.
ex) Array.prototype를 통해 새로운 프로퍼티를 생성하거나 기존의 메소드를 오염시킬 수 있다.
=> 생성자 함수객체는 prototype를 가지고 있고 new와 함수객체를 통해 만들어진 객체는 함수객체의 prototype 프로퍼티를 상속받는다.


5. __proto__ === ([[prototype]])
=> 함수 객체를 통해 만들어진 객체가 함수객체가 내려준 prototype에 접근할 떄 사용하는 프로퍼티
=> [[prototype]]의 constructor는 자신을 만든 생성자 함수를 가르킨다.
=> prototype의 constructor는 자기 자신 생성자 함수를 가르킨다.


6. 프로토타입 체인
객체의 key에 접근할 떄 해당 프로퍼티가 존재하지 않으면 [[prototype]]에서 확인한다.

Array 생성자 함수는 Object의 prototype을 상속받았다. [[prototype]]에 Object이 prototype의 프로퍼티가 존재한다.
Array의 prototype은 객체에 내려줄 Array의 프로퍼티와 Object로 인해 상속받은 prototype이 존재한다.
=> 자식 - 부모 - 부모 이렇게 올라가서 확인한다. 프로토타입 체이닝의 종점은 Object.prototype이다.


ex)cosnt data = new Person()를 통해 객체를 생성하면 data에는 Person의 prototype + constructor가 부여된다.
Person 자체는 사용자가 만들었지만 Funtion prototype을 [[prototype]]으로 갖는다. 그래서 Person.bind, call 등등 사용가능



