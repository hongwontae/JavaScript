1. 프로토타입을 구현하면 생성자 함수가 생성할 객체는 [[prototype]]를 통해 프로퍼티를 가질 수 있다.
=> 이는 메모리를 아낀다.

2. 모든 객체는 [[prototype]]이라는 내부 슬롯을 가지고 있고 이는 상위 객체를 의미한다.
생성자 함수의 프로퍼티인 prototype를 통해 생성할 객체의 [[prototype]]에 전달한다. 이 떄 prototype은 constructor가 포함되어 있다.
생성된 객체는 costructor를 통해 생성자 함수에 접근할 수 있다.

3. __proto__
생성된 객체의 [[prototype]]은 프로퍼티가 아니고 내부 슬롯이기에 원칙적으로 접근은 불가한다.
__proto__를 통해 상위 객체의 프로토타입에 접근할 수 있다.
__proto__는 Object.prototype의 프로퍼티이다. 객체가 직접소유하는 프로퍼티가 아니다.
__proto__를 통해 [[prototype]]에 접근하는 이유는 서로 참조하는 순환형 프로토타입 체인은 무한루프에 빠지기 때문이다.
__proto__ 모든 객체가 사용 가능한 것은 아니기 떄문에 Object.getPrototypeOf()를 통해 값을 참조하거나
 Object.setPrototypeOf()를 통해 프로토타입을 교체한다.



4. prototype 프로퍼티 소유 여부
함수 객체(생성자 함수)만이 prototype 프로퍼티의 기능을 가진다.
=> 화살표 함수를 사용하지 않는 함수 선언식, 함수 표현식 또한 prototype(constructor)를 갖지만 new 형식으로 객체를
생성하지 않기에 의미없다.
prototype 프로퍼티를 갖지 않는 함수를 non-constructor라고 한다. (화살표 함수, 메서드 축약 구문)
화살표 함수나 메서드 축약 표현은 갖지 않는다.


5. Constructor 프로퍼티
함수 객체의 prototype 프로퍼티는 constructor라는 프로퍼티를 갖는다.
constructor는 자신을 참조하고 있는 생성자 함수를 가리킨다.
해당 연결은 생성자 함수가 생성될 떄 이루어진다.



6. prototype 생성시점
함수가 정의되어 함수객체를 생성하는 시점에 prototype 프로퍼티도 함께 생성된다.
=> 함수 표현식을 정의하고 그 윗줄에 prototype를 호출하면 에러가 발생한다. / 증명


7. 프로토타입 체인
객체의 프로퍼티에 접근하려고 할 떄 해당 객체에 존재하지 않으면 내부 슬롯인 [[prototype]]을 따라 부모 역할을 하는 프로토타입
까지 검색한다.



