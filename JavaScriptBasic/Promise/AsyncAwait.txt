Promise를 간편하게 실행해주고 동기적인 코드 진행처럼 보이게 해준다.

Promise === Async/Await가 아니다.
=> 둘 다 알맞은 상황에 사용해야 한다.

함수의 호출의 리턴이 Promise이고 resolve, reject를 호출하지 않으면 Promise는 pending 상태이다.
그렇기에 Promise안에는 resolve나 reject를 사용해서 상태를 표현해야 한다.

함수앞에 async라는 키워드를 사용하면 함수 본문의 코드들이 Promise로 변환이 된다.

await는 async 안에서만 사용할 수 있다.
await는 then()을 사용하는 것처럼 awit 앞의 코드의 실행이 끝나기 전까지 기다린다.

async의 함수 리턴 값은 항상 Promise이다. 그러므로 then을 통해서 받아야 한다.


Promise.all()/ Promise.race()
인자로 Promise값인 배열이 들어간다. 동시에 처리하며 all은 모두 처리하고, race는 먼저 온것만 처리한다.


* await
=> 시간이 필요한 작업에 await가 붙지 않으면 기다리지 않고 다음 코드/ 다음 줄로 간다.
그 코드는 전의 코드의 결과가 필요하지만 없기 떄문에 오류가 발생한다.
ex) const response = fetch(getUrl);
    const data = response.json()
=> 이 떄 윗 줄에 await가 없기 떄문에 통신 데이터를 받기도 전에 밑줄 코드를 실행한다.
=> 그렇으로 response 데이터는 그냥 undefined 데이터이다. => json()이라는 메서드도 존재하지 않는다.

또한 await는 then()과 같기 떄문에 resolve() 값을 받기 위해서는 await를 사용해야 한다.
그렇지 않으면 promise 객체를 생으로 받는다.
