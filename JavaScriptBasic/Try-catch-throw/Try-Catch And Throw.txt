Try-Catch And Throw

JS는 에러가 발생하면 스크립트는 중단되고 콜솔에 에러가 출력된다.
일반적인 에러 출력보다 생성자 에러를 생성하려면 => try-catch

try => 코드실행, 코드 실행에 에러가 없다면 catch는 건너뛴다.
catch => try의 에러 발생시 catch문이 실행된다. 이 문에서는 error이라는 객체가 매개변수에 주어진다.
error.message, error.name, error.stack => catch 객체의 에러 메시지 프로퍼티들이다.
finally => try 구문이 실행되든, catch 구문이 실행되든 finally 구문은 무조건 실행된다.
        => try나 catch에서 return을 사용하더라도 catch는 실행된다.

ex) try{
    try...
} catch(){
    try가 에러 발생 시 처리되는 구문...
} finally{
    try, catch 뭐가 되든 무조건 한 번은 실행되는 구문
}

Throw(예외 던지기)
예외를 강제로 발생시켜야 할 경우 throw를 사용한다.
예외를 던진다. => 예외 객체가 생성된다. => 실행 중 catch에서 실행된다.
사용자가 정의한 error 처리를 위해 throw 구문이 실행된다.

ex) throw new Error('error 입니다.') => 예외 객체를 생성해서 던진다.


Error => 에러가 발생한 콜 스택 정보를 담고 있기 떄문에 throw new Error('에러 메시지')로 사용한다.


* throw new Error();를 사용해서 에러를 던져서 catch로 잡으면 Error 객체가 constructor이다.
* 일반적으로 에러를 catch로 잡을 떄는 ReferenceError 객체가 constructor이다.
=> Error를 사용하면 자신이 원하는 에러 메시지나 에러의 발생 위치를 특정할 수 있다.
