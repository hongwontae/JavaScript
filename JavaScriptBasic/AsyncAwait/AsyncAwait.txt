Async는 항상 함수 앞에 붙는다.
Async가 붙은 함수는 항상 fulfilled된 프라미스를 반환한다.

명시적으로 Primise를 리턴값으로 주어도 위와 같은 로직을 실행한다.
async function func1 (){
    return Promise.resolve(10);
}
func1().then(res)=>{
    console.log(res)
}

=> async는 항상 프라미스를 반환하고 프라미스가 아닌 값은 프라미스로 감싸 반환한다.
=> 비동기 함수가 되는 것이다.

Async 함수 내에서는 await를 사용할 수 있다. 다른 곳에서 사용은 불가능하다.
await 키워드를 만나면 해당 프라미스가 처리될 때까지 기다린다. => 비동기 안의 동기
await는 then()의 역할과 비슷하다고 생각하면 된다.
await가 실행되는 동안에도 엔진을 막지 막는다.

Async의 에러 처리는 try-catch를 이용한다.

let result = await new Promise.all([
    fetch(url1)
    fetch(url2)
]); => 여러 개의 프라미스가 모두 처리되길 기다릴 떄 await와 Promise.all를 사용할 수 있다.