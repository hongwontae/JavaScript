Fetch API
HTTP request 전송 기능을 제공하는 클라이언트 사이드 Web API이다.
클라이언트 → 서버 : request
서버 → 클라이언트: response
브라우저에 내장된 함수이다. (axios는 라이브러리)

특징
1. 서버와의 통신을 통해 CRUD를 구현
2. 프라미스 지원 내장 함수

const promise = fetch(URL, [options])
1번째 인자: HTTP 요청을 전달할 url
2번째 인자: 옵션 객체 (HTTP 요청 메서드, HTTP 요청 헤더, payload 등)

return 값은 HTTP 응답을 나타내는 Response 객체를 래핑한 Promise 객체 반환이다.
response => HTTP 응답 상태(status), HTTP 응답 헤더(headers), HTTP 응답 전문(body) 등을 읽어올 수 있다.

response 객체의 프로퍼티
1. Response.ok : HTTP 응답 성공 여부를 나타내는 속성이다.
true = 200~299 상태코드 (응답 성공)/ false = not (응답 실패)

2. Response.status : HTTP 상태코드
(클라이언트가 서버를 향해 리퀘스트를 보낼 때 서버에서 그 결과가 어떻게 되었는지 알려주는 역할을 한다.)

       클래스	            설명
1XX	   Informational	리퀘스트를 받아들여 처리중
2XX	   Success	        리퀘스트를 정상적으로 처리했음
3XX	   Redirection	    리퀘스트를 완료하기 위해서 추가 동작 필요
4XX	   Client Error	    서버는 리퀘스트 이해 불가능
5XX	   Server Err	    서버는 리퀘스트 처리 실패
=> 정상적으로 작동했으면 200이 반환된다.


** json이 서버로 부터 넘어오면 json 데이터 형식은 문자열이다.
   해당 json 문자열 데이터를 객체로 사용하기 위해 JSON.parse()를 사용한다.
   이 행위를 역직렬화라고 부른다.
(객체를 json 데이터 문자열 형식로 바꾸는 것을 직렬화라고 하며 JSON.stringify()를 사용한다.)

3. response.json() : json 데이터가 넘어올 때는 문자열로 넘어오는데 객체로 사용하기 위해 역직렬화 해주는 메서드


서버 역할을 해주는 웹 API => JSONPlaceHolder

HTTP 통신
1. get 방식
=> GET 방식에서는 보낼 데이터가 없기 때문에, headers와 body 옵션이 필요가 없다.

2. post 방식
fetch(url, {method, headers, body})
1. method = HTTP 요청 메서드

2. headers = HTTP 헤더 
=>Content-Type” : 정의: HTTP 메시지에 담겨 보내는 데이터의 형식을 알려주는 헤더
EX: "Content-Type": "application/json" = JSON 형식으로 데이터를 보내줘

3. body = body안에 payload 작성
페이로드(payload)는 전송되는 데이터를 의미한다.
데이터를 전송할 때, 헤더와 메타 데이터, 에러 체크 비트 등과 같은 다양한 요소들을 함께 보내어,
데이터 전송의 효율과 안정성을 높이게 된다.
이 때, 보내고자 하는 데이터 자체를 의미하는 것이
바로 페이로드 그 이외의 데이터들은 전부 통신을 용이하게 해주는 부차적인 정보인 프로토콜 오버헤드
